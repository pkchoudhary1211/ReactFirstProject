{"ast":null,"code":"'use strict';\n\nvar iconv = require('iconv-lite');\n/**\n * Character set encoding and decoding functions\n */\n\n\nvar charset = module.exports = {\n  /**\n   * Encodes an unicode string into an Buffer object as UTF-8\n   *\n   * We force UTF-8 here, no strange encodings allowed.\n   *\n   * @param {String} str String to be encoded\n   * @return {Buffer} UTF-8 encoded typed array\n   */\n  encode: function (str) {\n    return new Buffer(str, 'utf-8');\n  },\n\n  /**\n   * Decodes a string from Buffer to an unicode string using specified encoding\n   *\n   * @param {Buffer} buf Binary data to be decoded\n   * @param {String} [fromCharset='UTF-8'] Binary data is decoded into string using this charset\n   * @return {String} Decded string\n   */\n  decode: function (buf, fromCharset) {\n    fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n\n    if (/^(us\\-)?ascii|utf\\-8|7bit$/i.test(fromCharset)) {\n      return buf.toString('utf-8');\n    }\n\n    return iconv.decode(buf, fromCharset);\n  },\n\n  /**\n   * Convert a string from specific encoding to UTF-8 Buffer\n   *\n   * @param {String|Buffer} str String to be encoded\n   * @param {String} [fromCharset='UTF-8'] Source encoding for the string\n   * @return {Buffer} UTF-8 encoded typed array\n   */\n  convert: function (data, fromCharset) {\n    fromCharset = charset.normalizeCharset(fromCharset || 'UTF-8');\n    var bufString;\n\n    if (typeof data !== 'string') {\n      if (/^(us\\-)?ascii|utf\\-8|7bit$/i.test(fromCharset)) {\n        return data;\n      }\n\n      bufString = charset.decode(data, fromCharset);\n      return charset.encode(bufString);\n    }\n\n    return charset.encode(data);\n  },\n\n  /**\n   * Converts well known invalid character set names to proper names.\n   * eg. win-1257 will be converted to WINDOWS-1257\n   *\n   * @param {String} charset Charset name to convert\n   * @return {String} Canoninicalized charset name\n   */\n  normalizeCharset: function (charset) {\n    var match;\n\n    if (match = charset.match(/^utf[\\-_]?(\\d+)$/i)) {\n      return 'UTF-' + match[1];\n    }\n\n    if (match = charset.match(/^win(?:dows)?[\\-_]?(\\d+)$/i)) {\n      return 'WINDOWS-' + match[1];\n    }\n\n    if (match = charset.match(/^latin[\\-_]?(\\d+)$/i)) {\n      return 'ISO-8859-' + match[1];\n    }\n\n    return charset;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}