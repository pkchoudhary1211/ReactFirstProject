{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Sector from \"../Sector\";\n\nvar Sectors = function Sectors(_ref) {\n  var center = _ref.center,\n      data = _ref.data,\n      onSectorHover = _ref.onSectorHover,\n      expandSize = _ref.expandSize,\n      strokeWidth = _ref.strokeWidth,\n      strokeColor = _ref.strokeColor,\n      startAngle = _ref.startAngle,\n      angleMargin = _ref.angleMargin,\n      props = _objectWithoutProperties(_ref, [\"center\", \"data\", \"onSectorHover\", \"expandSize\", \"strokeWidth\", \"strokeColor\", \"startAngle\", \"angleMargin\"]);\n\n  var total = data.reduce(function (prev, current) {\n    return current.value + prev;\n  }, 0);\n  var angleStart = startAngle;\n  var angleEnd = startAngle;\n  return total > 0 ? React.createElement(\"g\", null, data.map(function (d, i) {\n    var isLarge = d.value / total > 0.5;\n    var angle = 360 * d.value / total;\n    var radius = center + (d.expanded ? expandSize : 0) - strokeWidth / 2;\n    angleStart = angleEnd;\n    angleMargin = angleMargin > angle ? angle : angleMargin;\n    angleEnd = angleStart + angle - angleMargin;\n    var x1 = center + radius * Math.cos(Math.PI * angleStart / 180);\n    var y1 = center + radius * Math.sin(Math.PI * angleStart / 180);\n    var x2 = center + radius * Math.cos(Math.PI * angleEnd / 180);\n    var y2 = center + radius * Math.sin(Math.PI * angleEnd / 180);\n    var path = \"\\n          M\" + center + \",\" + center + \"\\n          L\" + x1 + \",\" + y1 + \"\\n          A\" + radius + \",\" + radius + \"\\n          0 \" + (isLarge ? 1 : 0) + \",1\\n          \" + x2 + \",\" + y2 + \"\\n          z\\n        \";\n    angleEnd += angleMargin;\n    return React.createElement(Sector, _extends({\n      key: \"sector\" + i,\n      fill: d.color,\n      path: path,\n      href: d.href,\n      strokeColor: strokeColor,\n      strokeWidth: strokeWidth,\n      total: total,\n      onMouseEnter: function onMouseEnter(e) {\n        return onSectorHover(d, i, e);\n      },\n      onMouseLeave: function onMouseLeave(e) {\n        return onSectorHover(null, null, e);\n      },\n      onTouchEnd: function onTouchEnd(e) {\n        return onSectorHover(null, null, e);\n      },\n      onTouchStart: function onTouchStart(e) {\n        return onSectorHover(d, i, e);\n      }\n    }, props, d));\n  })) : null;\n};\n\nSectors.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  center: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    color: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    value: PropTypes.number.isRequired\n  })).isRequired,\n  onSectorHover: PropTypes.func,\n  expandSize: PropTypes.number,\n  strokeColor: Sector.propTypes.strokeColor,\n  strokeWidth: Sector.propTypes.strokeWidth,\n  startAngle: PropTypes.number,\n  angleMargin: PropTypes.number\n} : {};\nSectors.defaultProps = {\n  expandSize: 5\n};\nexport default Sectors;","map":null,"metadata":{},"sourceType":"module"}