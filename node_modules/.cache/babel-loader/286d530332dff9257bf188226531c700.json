{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Circle from \"./Circle\";\nimport Sectors from \"./Sectors\";\nimport Sector from \"./Sector\";\n\nvar PieChart = function (_React$Component) {\n  _inherits(PieChart, _React$Component);\n\n  function PieChart() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, PieChart);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n      expandedIndex: null\n    }, _this.handleSectorHover = function (data, index, e) {\n      var _this$props = _this.props,\n          expandOnHover = _this$props.expandOnHover,\n          onSectorHover = _this$props.onSectorHover;\n\n      if (expandOnHover) {\n        _this.setState({\n          expandedIndex: index\n        });\n      }\n\n      if (onSectorHover) {\n        onSectorHover(data, index, e);\n      }\n    }, _this.shouldExpand = function () {\n      var _this$props2 = _this.props,\n          data = _this$props2.data,\n          expandOnHover = _this$props2.expandOnHover;\n      var oneDataIsExpanded = data.some(function (d) {\n        return d.expanded;\n      });\n      return oneDataIsExpanded || expandOnHover;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  PieChart.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n    if (nextProps.expandedIndex >= 0) {\n      return {\n        expandedIndex: nextProps.expandedIndex\n      };\n    } else {\n      return null;\n    }\n  };\n\n  PieChart.prototype.renderSingleData = function renderSingleData(d, center) {\n    var _this2 = this;\n\n    var expandedIndex = this.state.expandedIndex;\n    var _props = this.props,\n        expandOnHover = _props.expandOnHover,\n        expandSize = _props.expandSize;\n    return React.createElement(Circle, _extends({\n      center: center,\n      radius: center + (d.expanded || expandOnHover && expandedIndex === 0 ? expandSize : 0),\n      onMouseEnter: function onMouseEnter(e) {\n        return _this2.handleSectorHover(d, 0, e);\n      },\n      onMouseLeave: function onMouseLeave(e) {\n        return _this2.handleSectorHover(null, null, e);\n      },\n      onTouchEnd: function onTouchEnd(e) {\n        return _this2.handleSectorHover(null, null, e);\n      },\n      onTouchStart: function onTouchStart(e) {\n        return _this2.handleSectorHover(d, 0, e);\n      }\n    }, d));\n  };\n\n  PieChart.prototype.renderMultipleData = function renderMultipleData(center) {\n    var expandedIndex = this.state.expandedIndex;\n\n    var _props2 = this.props,\n        data = _props2.data,\n        expandOnHover = _props2.expandOnHover,\n        props = _objectWithoutProperties(_props2, [\"data\", \"expandOnHover\"]);\n\n    return React.createElement(Sectors, _extends({\n      center: center,\n      data: expandOnHover ? data.map(function (d, i) {\n        return _extends({}, d, {\n          expanded: i === expandedIndex\n        });\n      }) : data\n    }, props, {\n      onSectorHover: this.handleSectorHover\n    }));\n  };\n\n  PieChart.prototype.render = function render() {\n    var _props3 = this.props,\n        data = _props3.data,\n        expandSize = _props3.expandSize,\n        viewBoxSize = _props3.viewBoxSize;\n    var center = viewBoxSize / 2;\n    var offset = this.shouldExpand() ? expandSize : 0;\n    var dataWithValue = data.filter(function (d) {\n      return d.value > 0;\n    });\n    return dataWithValue && dataWithValue.length > 0 ? React.createElement(\"svg\", {\n      viewBox: \"0 0 \" + (viewBoxSize + offset * 2) + \" \" + (viewBoxSize + offset * 2)\n    }, React.createElement(\"g\", {\n      transform: \"translate(\" + offset + \", \" + offset + \")\"\n    }, dataWithValue.length === 1 ? this.renderSingleData(dataWithValue[0], center) : this.renderMultipleData(center))) : null;\n  };\n\n  return PieChart;\n}(React.Component);\n\nPieChart.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    color: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    value: PropTypes.number.isRequired,\n    href: PropTypes.string\n  })).isRequired,\n  expandOnHover: PropTypes.bool,\n  expandSize: PropTypes.number,\n  expandedIndex: PropTypes.number,\n  onSectorHover: PropTypes.func,\n  strokeColor: Sector.propTypes.strokeColor,\n  strokeLinejoin: Sector.propTypes.strokeLinejoin,\n  strokeWidth: Sector.propTypes.strokeWidth,\n  startAngle: PropTypes.number,\n  angleMargin: PropTypes.number,\n  viewBoxSize: PropTypes.number,\n  transitionDuration: Sector.propTypes.transitionDuration,\n  transitionTimingFunction: Sector.propTypes.transitionTimingFunction\n} : {};\nPieChart.defaultProps = {\n  data: [],\n  expandOnHover: false,\n  expandSize: Sectors.defaultProps.expandSize,\n  expandedIndex: -1,\n  onSectorHover: null,\n  shrinkOnTouchEnd: false,\n  strokeColor: Sector.defaultProps.strokeColor,\n  strokeLinejoin: Sector.defaultProps.strokeLinejoin,\n  strokeWidth: Sector.defaultProps.strokeWidth,\n  startAngle: 0,\n  angleMargin: 0,\n  viewBoxSize: 100,\n  transitionDuration: Sector.defaultProps.transitionDuration,\n  transitionTimingFunction: Sector.defaultProps.transitionTimingFunction\n};\nexport default PieChart;","map":null,"metadata":{},"sourceType":"module"}