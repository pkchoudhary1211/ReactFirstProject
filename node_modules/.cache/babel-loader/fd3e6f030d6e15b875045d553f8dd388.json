{"ast":null,"code":"'use strict';\n\nconst stream = require('stream');\n\nconst Transform = stream.Transform;\n/**\n * Ensures that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */\n\nclass LeWindows extends Transform {\n  constructor(options) {\n    super(options); // init Transform\n\n    this.options = options || {};\n    this.lastByte = false;\n  }\n  /**\n   * Escapes dots\n   */\n\n\n  _transform(chunk, encoding, done) {\n    let buf;\n    let lastPos = 0;\n\n    for (let i = 0, len = chunk.length; i < len; i++) {\n      if (chunk[i] === 0x0a) {\n        // \\n\n        if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n          if (i > lastPos) {\n            buf = chunk.slice(lastPos, i);\n            this.push(buf);\n          }\n\n          this.push(Buffer.from('\\r\\n'));\n          lastPos = i + 1;\n        }\n      }\n    }\n\n    if (lastPos && lastPos < chunk.length) {\n      buf = chunk.slice(lastPos);\n      this.push(buf);\n    } else if (!lastPos) {\n      this.push(chunk);\n    }\n\n    this.lastByte = chunk[chunk.length - 1];\n    done();\n  }\n\n}\n\nmodule.exports = LeWindows;","map":null,"metadata":{},"sourceType":"script"}