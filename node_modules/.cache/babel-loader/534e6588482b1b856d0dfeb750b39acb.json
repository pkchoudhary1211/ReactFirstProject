{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst PoolResource = require('./pool-resource');\n\nconst SMTPConnection = require('../smtp-connection');\n\nconst wellKnown = require('../well-known');\n\nconst shared = require('../shared');\n\nconst packageData = require('../../package.json');\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */\n\n\nclass SMTPPool extends EventEmitter {\n  constructor(options) {\n    super();\n    options = options || {};\n\n    if (typeof options === 'string') {\n      options = {\n        url: options\n      };\n    }\n\n    let urlData;\n    let service = options.service;\n\n    if (typeof options.getSocket === 'function') {\n      this.getSocket = options.getSocket;\n    }\n\n    if (options.url) {\n      urlData = shared.parseConnectionUrl(options.url);\n      service = service || urlData.service;\n    }\n\n    this.options = shared.assign(false, // create new object\n    options, // regular options\n    urlData, // url options\n    service && wellKnown(service) // wellknown options\n    );\n    this.options.maxConnections = this.options.maxConnections || 5;\n    this.options.maxMessages = this.options.maxMessages || 100;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'smtp-pool'\n    }); // temporary object\n\n    let connection = new SMTPConnection(this.options);\n    this.name = 'SMTP (pool)';\n    this.version = packageData.version + '[client:' + connection.version + ']';\n    this._rateLimit = {\n      counter: 0,\n      timeout: null,\n      waiting: [],\n      checkpoint: false,\n      delta: Number(this.options.rateDelta) || 1000,\n      limit: Number(this.options.rateLimit) || 0\n    };\n    this._closed = false;\n    this._queue = [];\n    this._connections = [];\n    this._connectionCounter = 0;\n    this.idling = true;\n    setImmediate(() => {\n      if (this.idling) {\n        this.emit('idle');\n      }\n    });\n  }\n  /**\n   * Placeholder function for creating proxy sockets. This method immediatelly returns\n   * without a socket\n   *\n   * @param {Object} options Connection options\n   * @param {Function} callback Callback function to run with the socket keys\n   */\n\n\n  getSocket(options, callback) {\n    // return immediatelly\n    return setImmediate(() => callback(null, false));\n  }\n  /**\n   * Queues an e-mail to be sent using the selected settings\n   *\n   * @param {Object} mail Mail object\n   * @param {Function} callback Callback function\n   */\n\n\n  send(mail, callback) {\n    if (this._closed) {\n      return false;\n    }\n\n    this._queue.push({\n      mail,\n      callback\n    });\n\n    if (this.idling && this._queue.length >= this.options.maxConnections) {\n      this.idling = false;\n    }\n\n    setImmediate(() => this._processMessages());\n    return true;\n  }\n  /**\n   * Closes all connections in the pool. If there is a message being sent, the connection\n   * is closed later\n   */\n\n\n  close() {\n    let connection;\n    let len = this._connections.length;\n    this._closed = true; // clear rate limit timer if it exists\n\n    clearTimeout(this._rateLimit.timeout);\n\n    if (!len && !this._queue.length) {\n      return;\n    } // remove all available connections\n\n\n    for (let i = len - 1; i >= 0; i--) {\n      if (this._connections[i] && this._connections[i].available) {\n        connection = this._connections[i];\n        connection.close();\n        this.logger.info({\n          tnx: 'connection',\n          cid: connection.id,\n          action: 'removed'\n        }, 'Connection #%s removed', connection.id);\n      }\n    }\n\n    if (len && !this._connections.length) {\n      this.logger.debug({\n        tnx: 'connection'\n      }, 'All connections removed');\n    }\n\n    if (!this._queue.length) {\n      return;\n    } // make sure that entire queue would be cleaned\n\n\n    let invokeCallbacks = () => {\n      if (!this._queue.length) {\n        this.logger.debug({\n          tnx: 'connection'\n        }, 'Pending queue entries cleared');\n        return;\n      }\n\n      let entry = this._queue.shift();\n\n      if (entry && typeof entry.callback === 'function') {\n        try {\n          entry.callback(new Error('Connection pool was closed'));\n        } catch (E) {\n          this.logger.error({\n            err: E,\n            tnx: 'callback',\n            cid: connection.id\n          }, 'Callback error for #%s: %s', connection.id, E.message);\n        }\n      }\n\n      setImmediate(invokeCallbacks);\n    };\n\n    setImmediate(invokeCallbacks);\n  }\n  /**\n   * Check the queue and available connections. If there is a message to be sent and there is\n   * an available connection, then use this connection to send the mail\n   */\n\n\n  _processMessages() {\n    let connection;\n    let i, len; // do nothing if already closed\n\n    if (this._closed) {\n      return;\n    } // do nothing if queue is empty\n\n\n    if (!this._queue.length) {\n      if (!this.idling) {\n        // no pending jobs\n        this.idling = true;\n        this.emit('idle');\n      }\n\n      return;\n    } // find first available connection\n\n\n    for (i = 0, len = this._connections.length; i < len; i++) {\n      if (this._connections[i].available) {\n        connection = this._connections[i];\n        break;\n      }\n    }\n\n    if (!connection && this._connections.length < this.options.maxConnections) {\n      connection = this._createConnection();\n    }\n\n    if (!connection) {\n      // no more free connection slots available\n      this.idling = false;\n      return;\n    } // check if there is free space in the processing queue\n\n\n    if (!this.idling && this._queue.length < this.options.maxConnections) {\n      this.idling = true;\n      this.emit('idle');\n    }\n\n    let entry = connection.queueEntry = this._queue.shift();\n\n    entry.messageId = (connection.queueEntry.mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n    connection.available = false;\n    this.logger.debug({\n      tnx: 'pool',\n      cid: connection.id,\n      messageId: entry.messageId,\n      action: 'assign'\n    }, 'Assigned message <%s> to #%s (%s)', entry.messageId, connection.id, connection.messages + 1);\n\n    if (this._rateLimit.limit) {\n      this._rateLimit.counter++;\n\n      if (!this._rateLimit.checkpoint) {\n        this._rateLimit.checkpoint = Date.now();\n      }\n    }\n\n    connection.send(entry.mail, (err, info) => {\n      // only process callback if current handler is not changed\n      if (entry === connection.queueEntry) {\n        try {\n          entry.callback(err, info);\n        } catch (E) {\n          this.logger.error({\n            err: E,\n            tnx: 'callback',\n            cid: connection.id\n          }, 'Callback error for #%s: %s', connection.id, E.message);\n        }\n\n        connection.queueEntry = false;\n      }\n    });\n  }\n  /**\n   * Creates a new pool resource\n   */\n\n\n  _createConnection() {\n    let connection = new PoolResource(this);\n    connection.id = ++this._connectionCounter;\n    this.logger.info({\n      tnx: 'pool',\n      cid: connection.id,\n      action: 'conection'\n    }, 'Created new pool resource #%s', connection.id); // resource comes available\n\n    connection.on('available', () => {\n      this.logger.debug({\n        tnx: 'connection',\n        cid: connection.id,\n        action: 'available'\n      }, 'Connection #%s became available', connection.id);\n\n      if (this._closed) {\n        // if already closed run close() that will remove this connections from connections list\n        this.close();\n      } else {\n        // check if there's anything else to send\n        this._processMessages();\n      }\n    }); // resource is terminated with an error\n\n    connection.once('error', err => {\n      if (err.code !== 'EMAXLIMIT') {\n        this.logger.error({\n          err,\n          tnx: 'pool',\n          cid: connection.id\n        }, 'Pool Error for #%s: %s', connection.id, err.message);\n      } else {\n        this.logger.debug({\n          tnx: 'pool',\n          cid: connection.id,\n          action: 'maxlimit'\n        }, 'Max messages limit exchausted for #%s', connection.id);\n      }\n\n      if (connection.queueEntry) {\n        try {\n          connection.queueEntry.callback(err);\n        } catch (E) {\n          this.logger.error({\n            err: E,\n            tnx: 'callback',\n            cid: connection.id\n          }, 'Callback error for #%s: %s', connection.id, E.message);\n        }\n\n        connection.queueEntry = false;\n      } // remove the erroneus connection from connections list\n\n\n      this._removeConnection(connection);\n\n      this._continueProcessing();\n    });\n    connection.once('close', () => {\n      this.logger.info({\n        tnx: 'connection',\n        cid: connection.id,\n        action: 'closed'\n      }, 'Connection #%s was closed', connection.id);\n\n      this._removeConnection(connection);\n\n      if (connection.queueEntry) {\n        // If the connection closed when sending, add the message to the queue again\n        // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n        // in the next event loop\n        setTimeout(() => {\n          if (connection.queueEntry) {\n            this.logger.debug({\n              tnx: 'pool',\n              cid: connection.id,\n              messageId: connection.queueEntry.messageId,\n              action: 'requeue'\n            }, 'Re-queued message <%s> for #%s', connection.queueEntry.messageId, connection.id);\n\n            this._queue.unshift(connection.queueEntry);\n\n            connection.queueEntry = false;\n          }\n\n          this._continueProcessing();\n        }, 50);\n      } else {\n        this._continueProcessing();\n      }\n    });\n\n    this._connections.push(connection);\n\n    return connection;\n  }\n  /**\n   * Continue to process message if the pool hasn't closed\n   */\n\n\n  _continueProcessing() {\n    if (this._closed) {\n      this.close();\n    } else {\n      setTimeout(() => this._processMessages(), 100);\n    }\n  }\n  /**\n   * Remove resource from pool\n   *\n   * @param {Object} connection The PoolResource to remove\n   */\n\n\n  _removeConnection(connection) {\n    let index = this._connections.indexOf(connection);\n\n    if (index !== -1) {\n      this._connections.splice(index, 1);\n    }\n  }\n  /**\n   * Checks if connections have hit current rate limit and if so, queues the availability callback\n   *\n   * @param {Function} callback Callback function to run once rate limiter has been cleared\n   */\n\n\n  _checkRateLimit(callback) {\n    if (!this._rateLimit.limit) {\n      return callback();\n    }\n\n    let now = Date.now();\n\n    if (this._rateLimit.counter < this._rateLimit.limit) {\n      return callback();\n    }\n\n    this._rateLimit.waiting.push(callback);\n\n    if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {\n      return this._clearRateLimit();\n    } else if (!this._rateLimit.timeout) {\n      this._rateLimit.timeout = setTimeout(() => this._clearRateLimit(), this._rateLimit.delta - (now - this._rateLimit.checkpoint));\n      this._rateLimit.checkpoint = now;\n    }\n  }\n  /**\n   * Clears current rate limit limitation and runs paused callback\n   */\n\n\n  _clearRateLimit() {\n    clearTimeout(this._rateLimit.timeout);\n    this._rateLimit.timeout = null;\n    this._rateLimit.counter = 0;\n    this._rateLimit.checkpoint = false; // resume all paused connections\n\n    while (this._rateLimit.waiting.length) {\n      let cb = this._rateLimit.waiting.shift();\n\n      setImmediate(cb);\n    }\n  }\n  /**\n   * Returns true if there are free slots in the queue\n   */\n\n\n  isIdle() {\n    return this.idling;\n  }\n  /**\n   * Verifies SMTP configuration\n   *\n   * @param {Function} callback Callback function\n   */\n\n\n  verify(callback) {\n    let promise;\n\n    if (!callback) {\n      promise = new Promise((resolve, reject) => {\n        callback = shared.callbackPromise(resolve, reject);\n      });\n    }\n\n    let auth = new PoolResource(this).auth;\n    this.getSocket(this.options, (err, socketOptions) => {\n      if (err) {\n        return callback(err);\n      }\n\n      let options = this.options;\n\n      if (socketOptions && socketOptions.connection) {\n        this.logger.info({\n          tnx: 'proxy',\n          remoteAddress: socketOptions.connection.remoteAddress,\n          remotePort: socketOptions.connection.remotePort,\n          destHost: options.host || '',\n          destPort: options.port || '',\n          action: 'connected'\n        }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n        options = shared.assign(false, options);\n        Object.keys(socketOptions).forEach(key => {\n          options[key] = socketOptions[key];\n        });\n      }\n\n      let connection = new SMTPConnection(options);\n      let returned = false;\n      connection.once('error', err => {\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        connection.close();\n        return callback(err);\n      });\n      connection.once('end', () => {\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        return callback(new Error('Connection closed'));\n      });\n\n      let finalize = () => {\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        connection.quit();\n        return callback(null, true);\n      };\n\n      connection.connect(() => {\n        if (returned) {\n          return;\n        }\n\n        if (auth) {\n          connection.login(auth, err => {\n            if (returned) {\n              return;\n            }\n\n            if (err) {\n              returned = true;\n              connection.close();\n              return callback(err);\n            }\n\n            finalize();\n          });\n        } else {\n          finalize();\n        }\n      });\n    });\n    return promise;\n  }\n\n} // expose to the world\n\n\nmodule.exports = SMTPPool;","map":null,"metadata":{},"sourceType":"script"}