{"version":3,"file":"index.js","sources":["../src/channel_state.js","../src/events.js","../src/utils.js","../src/channel.js","../src/client_state.js","../src/connection.js","../src/signing.js","../src/client.js"],"sourcesContent":["import Immutable from 'seamless-immutable';\n\n/**\n * ChannelState - A container class for the channel state.\n */\n\nfunction byDate(a, b) {\n\treturn a.created_at - b.created_at;\n}\n\nexport class ChannelState {\n\tconstructor(channel) {\n\t\tthis._channel = channel;\n\t\tthis.watcher_count = 0;\n\t\tthis.typing = Immutable({});\n\t\tthis.read = Immutable({});\n\t\tthis.messages = Immutable([]);\n\t\tthis.threads = Immutable({});\n\t\t// a list of users to hide messages from\n\t\tthis.mutedUsers = Immutable([]);\n\t\tthis.watchers = Immutable({});\n\t\tthis.members = Immutable({});\n\t\tthis.last_message_at =\n\t\t\tchannel.last_message_at != null ? new Date(channel.last_message_at) : null;\n\t}\n\n\t/**\n\t * addMessageSorted - Add a message to the state\n\t *\n\t * @param {object} newMessage A new message\n\t *\n\t */\n\taddMessageSorted(newMessage) {\n\t\treturn this.addMessagesSorted([newMessage]);\n\t}\n\n\t/**\n\t * messageToImmutable - Takes the message object. Parses the dates, sets __html\n\t * and sets the status to received if missing. Returns an immutable message object\n\t *\n\t * @param {object} message an Immutable message object\n\t *\n\t */\n\tmessageToImmutable(message) {\n\t\tmessage.__html = message.html;\n\t\t// parse the date..\n\t\tmessage.created_at = new Date(message.created_at);\n\t\tmessage.updated_at = new Date(message.updated_at);\n\t\tif (!message.status) {\n\t\t\tmessage.status = 'received';\n\t\t}\n\t\treturn Immutable(message);\n\t}\n\n\t/**\n\t * addMessagesSorted - Add the list of messages to state and resorts the messages\n\t *\n\t * @param {array}   newMessages    A list of messages\n\t * @param {boolean} initializing   Weather channel is being initialized.\n\t *\n\t */\n\taddMessagesSorted(newMessages, initializing = false) {\n\t\t// parse all the new message dates and add __html for react\n\t\tconst parsedMessages = [];\n\t\tfor (const message of newMessages) {\n\t\t\tif (initializing && this.threads[message.id]) {\n\t\t\t\t// If we are initializing the state of channel (e.g., in case of connection recovery),\n\t\t\t\t// then in that case we remove thread related to this message from threads object.\n\t\t\t\t// This way we can ensure that we don't have any stale data in thread object\n\t\t\t\t// and consumer can refetch the replies.\n\t\t\t\tthis.threads = Immutable.without(this.threads, message.id);\n\t\t\t}\n\t\t\tconst parsedMsg = this.messageToImmutable(message);\n\t\t\tparsedMessages.push(parsedMsg);\n\t\t\tif (parsedMsg.created_at > this.last_message_at) {\n\t\t\t\tthis.last_message_at = parsedMsg.created_at;\n\t\t\t}\n\t\t}\n\n\t\t// update or append the messages...\n\t\tconst updatedThreads = [];\n\t\tfor (const message of parsedMessages) {\n\t\t\tconst isThreadReply = message.parent_id && !message.show_in_channel;\n\t\t\t// add to the main message list\n\t\t\tif (!isThreadReply) {\n\t\t\t\tthis.messages = this._addToMessageList(this.messages, message);\n\t\t\t}\n\t\t\t// add to the thread if applicable..\n\t\t\tconst parentID = message.parent_id;\n\t\t\tif (parentID) {\n\t\t\t\tconst thread = this.threads[parentID] || Immutable([]);\n\t\t\t\tconst threadMessages = this._addToMessageList(thread, message);\n\t\t\t\tthis.threads = this.threads.set(parentID, threadMessages);\n\t\t\t\tupdatedThreads.push(parentID);\n\t\t\t}\n\t\t}\n\n\t\t// Resort the main messages and the threads that changed...\n\t\tconst messages = [...this.messages];\n\t\tmessages.sort(byDate);\n\t\tthis.messages = Immutable(messages);\n\t\tfor (const parentID of updatedThreads) {\n\t\t\tconst threadMessages = this.threads[parentID]\n\t\t\t\t? [...this.threads[parentID]]\n\t\t\t\t: [];\n\t\t\tthreadMessages.sort(byDate);\n\t\t\tthis.threads = this.threads.set(parentID, threadMessages);\n\t\t}\n\t}\n\n\taddReaction(reaction, message) {\n\t\tconst { messages } = this;\n\t\tif (!message) return;\n\t\tconst { parent_id, show_in_channel } = message;\n\n\t\tif (parent_id && this.threads[parent_id]) {\n\t\t\tconst thread = this.threads[parent_id];\n\n\t\t\tfor (let i = 0; i < thread.length; i++) {\n\t\t\t\tlet message = thread[i];\n\t\t\t\tmessage = this._addReactionToMessage(message, reaction);\n\t\t\t\tif (!message) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.threads = this.threads.set(parent_id, thread.set(i, message));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ((!show_in_channel && !parent_id) || show_in_channel) {\n\t\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\t\tlet message = messages[i];\n\t\t\t\tmessage = this._addReactionToMessage(message, reaction);\n\t\t\t\tif (!message) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.messages = messages.set(i, message);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t_addReactionToMessage(message, reaction) {\n\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\tif (!idMatch) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\tif (this._channel.getClient().userID === reaction.user.id) {\n\t\t\tmessage = message.update('own_reactions', (old = []) =>\n\t\t\t\told.concat([reaction]),\n\t\t\t);\n\t\t}\n\t\tmessage = message.update('latest_reactions', (old = []) =>\n\t\t\told.concat([reaction]),\n\t\t);\n\n\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\told ? old + 1 : 1,\n\t\t);\n\n\t\treturn message;\n\t}\n\n\t_removeReactionFromMessage(message, reaction) {\n\t\tconst filterReaction = old =>\n\t\t\told.filter(\n\t\t\t\titem => item.type !== reaction.type || item.user.id !== reaction.user.id,\n\t\t\t);\n\t\tmessage = message.update('own_reactions', filterReaction);\n\t\tmessage = message.update('latest_reactions', filterReaction);\n\t\treturn message;\n\t}\n\n\tremoveReaction(reaction, message) {\n\t\tconst { messages } = this;\n\t\tif (!message) return;\n\t\tconst { parent_id, show_in_channel } = message;\n\n\t\tif (parent_id && this.threads[parent_id]) {\n\t\t\tconst thread = this.threads[parent_id];\n\t\t\tfor (let i = 0; i < thread.length; i++) {\n\t\t\t\tlet message = thread[i];\n\t\t\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\t\t\tif (!idMatch) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\t\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\t\t\told ? old - 1 : 0,\n\t\t\t\t);\n\n\t\t\t\tthis.threads = this.threads.set(parent_id, thread.set(i, message));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ((!show_in_channel && !parent_id) || show_in_channel) {\n\t\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\t\tlet message = messages[i];\n\t\t\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\t\t\tif (!idMatch) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\t\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\t\t\told ? old - 1 : 0,\n\t\t\t\t);\n\n\t\t\t\tthis.messages = messages.set(i, message);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isnt found\n\t *\n\t * @param {array} messages A list of messages\n\t * @param {object} newMessage The new message\n\t *\n\t */\n\t_addToMessageList(messages, newMessage) {\n\t\tlet updated = false;\n\n\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\tconst message = messages[i];\n\t\t\tconst idMatch = message.id && newMessage.id && message.id === newMessage.id;\n\n\t\t\tif (idMatch) {\n\t\t\t\tmessages = messages.set(i, newMessage);\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!updated) {\n\t\t\tmessages = messages.concat([newMessage]);\n\t\t}\n\n\t\treturn messages;\n\t}\n\n\t/**\n\t * removeMessage - Description\n\t *\n\t * @param {type} messageToRemove Object of the message to remove. Needs to have at id specified.\n\t *\n\t * @return {boolean} Returns if the message was removed\n\t */\n\tremoveMessage(messageToRemove) {\n\t\tlet removed = false;\n\t\tconst messages = this.messages.flatMap(message => {\n\t\t\tconst idMatch =\n\t\t\t\tmessage.id && messageToRemove.id && message.id === messageToRemove.id;\n\n\t\t\tif (idMatch) {\n\t\t\t\treturn [];\n\t\t\t} else {\n\t\t\t\tremoved = true;\n\t\t\t\treturn message;\n\t\t\t}\n\t\t});\n\n\t\tthis.messages = messages;\n\t\treturn removed;\n\t}\n\n\t/**\n\t * filterErrorMessages - Removes error messages from the channel state.\n\t *\n\t */\n\tfilterErrorMessages() {\n\t\tconst filteredMessages = this.messages.flatMap(message => {\n\t\t\tif (message.type !== 'error') {\n\t\t\t\treturn message;\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t});\n\n\t\tthis.messages = Immutable(filteredMessages);\n\t}\n\n\t/**\n\t * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n\t */\n\tclean() {\n\t\tconst now = new Date();\n\t\t// prevent old users from showing up as typing\n\t\tfor (const [userID, lastEvent] of Object.entries(this.typing)) {\n\t\t\tconst since = now - new Date(lastEvent.received_at);\n\t\t\tif (since > 7000) {\n\t\t\t\tthis.typing = this.typing.without(userID);\n\t\t\t\tthis._channel.getClient().dispatchEvent({\n\t\t\t\t\ttype: 'typing.stop',\n\t\t\t\t\tuser: { id: userID },\n\t\t\t\t\tcid: this._channel.cid,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n","export const EVENT_MAP = {\n\t'user.presence.changed': true,\n\t'user.watching.start': true,\n\t'user.watching.stop': true,\n\t'user.updated': true,\n\t'typing.start': true,\n\t'typing.stop': true,\n\t'message.new': true,\n\t'message.updated': true,\n\t'message.deleted': true,\n\t'message.read': true,\n\t'reaction.new': true,\n\t'reaction.deleted': true,\n\t'member.added': true,\n\t'member.updated': true,\n\t'member.removed': true,\n\t'channel.updated': true,\n\t'channel.deleted': true,\n\t'channel.truncated': true,\n\t'health.check': true,\n\t'notification.message_new': true,\n\t'notification.mark_read': true,\n\t'notification.invited': true,\n\t'notification.invite_accepted': true,\n\t'notification.added_to_channel': true,\n\t'notification.removed_from_channel': true,\n\t'notification.mutes_updated': true,\n\t'notification.channel_deleted': true,\n\t'notification.channel_truncated': true,\n\t// local events\n\t'connection.changed': true,\n\t'connection.recovered': true,\n};\n\nexport function isValidEventType(eventType) {\n\tif (eventType === 'all') {\n\t\treturn true;\n\t}\n\treturn EVENT_MAP[eventType] || false;\n}\n","/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {type} promise The promise you want to run and log\n * @param {type} name    A descriptive name of what the promise does for log output\n *\n */\n\nexport function logChatPromiseExecution(promise, name) {\n\tpromise\n\t\t.then(() => {\n\t\t\t// do nothing...\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.warn(`failed to do ${name}, ran into error: `, error);\n\t\t});\n}\n\nexport const sleep = m => new Promise(r => setTimeout(r, m));\n","import Immutable from 'seamless-immutable';\nimport { ChannelState } from './channel_state';\nimport { isValidEventType } from './events';\nimport { logChatPromiseExecution } from './utils';\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel {\n\t/**\n\t * constructor - Create a channel\n\t *\n\t * @param {Client} client the chat client\n\t * @param {string} type  the type of channel\n\t * @param {string} [id]  the id of the chat\n\t * @param {type} custom any additional custom params\n\t *\n\t * @return {Channel} Returns a new uninitialized channel\n\t */\n\tconstructor(client, type, id, data) {\n\t\tconst validTypeRe = /^[\\w_-]+$/;\n\t\tconst validIDRe = /^[\\w!_-]+$/;\n\n\t\tif (!validTypeRe.test(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`,\n\t\t\t);\n\t\t}\n\t\tif (!validIDRe.test(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`,\n\t\t\t);\n\t\t}\n\n\t\tthis._client = client;\n\t\tthis.type = type;\n\t\tthis.id = id;\n\t\t// used by the frontend, gets updated:\n\t\tthis.data = data;\n\t\t// this._data is used for the requests...\n\t\tthis._data = { ...data };\n\n\t\tthis.cid = `${type}:${id}`;\n\t\tthis.listeners = {};\n\t\t// perhaps the state variable should be private\n\t\tthis.state = new ChannelState(this);\n\t\tthis.initialized = false;\n\t\tthis.lastTypingEvent = null;\n\t\tthis.isTyping = false;\n\t\tthis.disconnected = false;\n\t}\n\n\t/**\n\t * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n\t *\n\t * @return {object}\n\t */\n\tgetClient() {\n\t\tif (this.disconnected === true) {\n\t\t\tthrow Error(`You can't use a channel after client.disconnect() was called`);\n\t\t}\n\t\treturn this._client;\n\t}\n\n\t/**\n\t * getConfig - Get the configs for this channel type\n\t *\n\t * @return {object}\n\t */\n\tgetConfig() {\n\t\tconst client = this.getClient();\n\t\treturn client.configs[this.type];\n\t}\n\n\t/**\n\t * sendMessage - Send a message to this channel\n\t *\n\t * @param {object} message The Message object\n\t *\n\t * @return {object} The Server Response\n\t */\n\n\tasync sendMessage(message) {\n\t\tconst data = await this.getClient().post(this._channelURL() + '/message', {\n\t\t\tmessage,\n\t\t});\n\t\treturn data;\n\t}\n\n\tsendFile(uri, name, contentType, user) {\n\t\treturn this.getClient().sendFile(\n\t\t\t`${this._channelURL()}/file`,\n\t\t\turi,\n\t\t\tname,\n\t\t\tcontentType,\n\t\t\tuser,\n\t\t);\n\t}\n\n\tsendImage(uri, name, contentType, user) {\n\t\treturn this.getClient().sendFile(\n\t\t\t`${this._channelURL()}/image`,\n\t\t\turi,\n\t\t\tname,\n\t\t\tcontentType,\n\t\t\tuser,\n\t\t);\n\t}\n\n\tdeleteFile(url) {\n\t\treturn this.getClient().delete(`${this._channelURL()}/file`, { url });\n\t}\n\n\tdeleteImage(url) {\n\t\treturn this.getClient().delete(`${this._channelURL()}/image`, { url });\n\t}\n\n\t/**\n\t * sendEvent - Send an event on this channel\n\t *\n\t * @param {object} event for example {type: 'message.read'}\n\t *\n\t * @return {object} The Server Response\n\t */\n\tasync sendEvent(event) {\n\t\tthis._checkInitialized();\n\t\tconst data = await this.getClient().post(this._channelURL() + '/event', {\n\t\t\tevent,\n\t\t});\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * sendReaction - Send a reaction about a message\n\t *\n\t * @param {string} messageID the message id\n\t * @param {object} reaction the reaction object for instance {type: 'love'}\n\t * @param {string} user_id the id of the user (used only for server side request) default null\n\t *\n\t * @return {object} The Server Response\n\t */\n\tasync sendReaction(messageID, reaction, user_id) {\n\t\tif (!messageID) {\n\t\t\tthrow Error(`Message id is missing`);\n\t\t}\n\t\tif (!reaction || Object.keys(reaction).length === 0) {\n\t\t\tthrow Error(`Reaction object is missing`);\n\t\t}\n\t\tconst body = {\n\t\t\treaction,\n\t\t};\n\t\tif (user_id != null) {\n\t\t\tbody.reaction = { ...reaction, user: { id: user_id } };\n\t\t}\n\t\tconst data = await this.getClient().post(\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/reaction`,\n\t\t\tbody,\n\t\t);\n\t\treturn data;\n\t}\n\n\t/**\n\t * deleteReaction - Delete a reaction by user and type\n\t *\n\t * @param {string} messageID the id of the message from which te remove the reaction\n\t * @param {string} reactionType the type of reaction that should be removed\n\t * @param {string} user_id the id of the user (used only for server side request) default null\n\t *\n\t * @return {object} The Server Response\n\t */\n\tdeleteReaction(messageID, reactionType, user_id) {\n\t\tthis._checkInitialized();\n\t\tif (!reactionType || !messageID) {\n\t\t\tthrow Error(\n\t\t\t\t'Deleting a reaction requires specifying both the message and reaction type',\n\t\t\t);\n\t\t}\n\n\t\tconst url =\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/reaction/${reactionType}`;\n\t\t//provided when server side request\n\t\tif (user_id) {\n\t\t\treturn this.getClient().delete(url, { user_id });\n\t\t}\n\n\t\treturn this.getClient().delete(url);\n\t}\n\n\t/**\n\t * update - Edit the channel's custom properties\n\t *\n\t * @param {object} custom The object to update the custom properties of this channel with\n\t *\n\t * @return {type} The server response\n\t */\n\tasync update(channelData, updateMessage) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tmessage: updateMessage,\n\t\t\tdata: channelData,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * delete - Delete the channel.. Messages are permanently removed.\n\t *\n\t * @return {object} The server response\n\t */\n\tasync delete() {\n\t\tconst data = await this.getClient().delete(this._channelURL());\n\t\treturn data;\n\t}\n\n\t/**\n\t * truncate - Removes all messages from the channel\n\t *\n\t * @return {object} The server response\n\t */\n\tasync truncate() {\n\t\tconst data = await this.getClient().post(this._channelURL() + '/truncate');\n\t\treturn data;\n\t}\n\n\tasync acceptInvite(options = {}) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\taccept_invite: true,\n\t\t\t...options,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync rejectInvite(options = {}) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\treject_invite: true,\n\t\t\t...options,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync addMembers(members) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tadd_members: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync addModerators(members) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tadd_moderators: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync removeMembers(members) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tremove_members: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync demoteModerators(members) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tdemote_moderators: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tsendAction(messageID, formData) {\n\t\tthis._checkInitialized();\n\t\tif (!messageID) {\n\t\t\tthrow Error(`Message id is missing`);\n\t\t}\n\t\treturn this.getClient().post(\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/action`,\n\t\t\t{\n\t\t\t\tmessage_id: messageID,\n\t\t\t\tform_data: formData,\n\t\t\t\tid: this.id,\n\t\t\t\ttype: this.type,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n\t *  Call this on every keystroke\n\t */\n\tasync keystroke() {\n\t\tif (!this.getConfig().typing_events) {\n\t\t\treturn;\n\t\t}\n\t\tconst now = new Date();\n\t\tconst diff = now - this.lastTypingEvent;\n\t\tthis.lastKeyStroke = now;\n\t\tthis.isTyping = true;\n\t\t// send a typing.start every 2 seconds\n\t\tif (diff > 2000) {\n\t\t\tthis.lastTypingEvent = new Date();\n\t\t\tawait this.sendEvent({\n\t\t\t\ttype: 'typing.start',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * stopTyping - Sets last typing to null and sends the typing.stop event\n\t */\n\tasync stopTyping() {\n\t\tif (!this.getConfig().typing_events) {\n\t\t\treturn;\n\t\t}\n\t\tthis.lastTypingEvent = null;\n\t\tthis.isTyping = false;\n\t\tawait this.sendEvent({\n\t\t\ttype: 'typing.stop',\n\t\t});\n\t}\n\n\t/**\n\t * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n\t *\n\t * @return {type} Description\n\t */\n\tlastMessage() {\n\t\t// get last 5 messages, sort, return the latest\n\t\t// get a slice of the last 5\n\t\tlet min = this.state.messages.length - 5;\n\t\tif (min < 0) {\n\t\t\tmin = 0;\n\t\t}\n\t\tconst max = this.state.messages.length + 1;\n\t\tconst messageSlice = this.state.messages.slice(min, max).asMutable();\n\n\t\t// sort by pk desc\n\t\tmessageSlice.sort((a, b) => b.created_at - a.created_at);\n\n\t\tlet lastMessage;\n\t\tif (messageSlice.length > 0) {\n\t\t\tlastMessage = messageSlice[0];\n\t\t}\n\t\treturn lastMessage;\n\t}\n\n\t/**\n\t * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n\t *\n\t * @return {Promise} Description\n\t */\n\tasync markRead(data = {}) {\n\t\tthis._checkInitialized();\n\n\t\tif (!this.getConfig().read_events) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tconst response = await this.getClient().post(this._channelURL() + '/read', {\n\t\t\t...data,\n\t\t});\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * clean - Cleans the channel state and fires stop typing if needed\n\t */\n\tclean() {\n\t\tif (this.lastKeyStroke) {\n\t\t\tconst now = new Date();\n\t\t\tconst diff = now - this.lastKeyStroke;\n\t\t\tif (diff > 1000 && this.isTyping) {\n\t\t\t\tlogChatPromiseExecution(this.stopTyping(), 'stop typing event');\n\t\t\t}\n\t\t}\n\n\t\tthis.state.clean();\n\t}\n\n\t/**\n\t * watch - Loads the initial channel state and watches for changes\n\t *\n\t * @param {object} options additional options for the query endpoint\n\t *\n\t * @return {object} The server response\n\t */\n\tasync watch(options) {\n\t\tconst defaultOptions = {\n\t\t\tstate: true,\n\t\t\twatch: true,\n\t\t\tpresence: false,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.getClient().wsPromise;\n\n\t\tif (!this.getClient()._hasConnectionID()) {\n\t\t\tdefaultOptions.watch = false;\n\t\t}\n\n\t\tconst combined = { ...defaultOptions, ...options };\n\t\tconst state = await this.query(combined);\n\t\tthis.initialized = true;\n\t\tthis._initializeState(state);\n\t\tthis.data = state.channel;\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:watch() - started watching channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\t\treturn state;\n\t}\n\n\t/**\n\t * stopwatching - Stops watching the channel\n\t *\n\t * @return {object} The server response\n\t */\n\tasync stopWatching() {\n\t\tconst response = await this.getClient().post(\n\t\t\tthis._channelURL() + '/stop-watching',\n\t\t\t{},\n\t\t);\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:watch() - stopped watching channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * getReplies - List the message replies for a parent message\n\t *\n\t * @param {type} parent_id The message parent id, ie the top of the thread\n\t * @param {type} options   Pagination params, ie {limit:10, idlte: 10}\n\t *\n\t * @return {type} A response with a list of messages\n\t */\n\tasync getReplies(parent_id, options) {\n\t\tconst data = await this.getClient().get(\n\t\t\tthis.getClient().baseURL + `/messages/${parent_id}/replies`,\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\n\t\t// add any messages to our thread state\n\t\tif (data.messages) {\n\t\t\tthis.state.addMessagesSorted(data.messages);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * getReactions - List the reactions, supports pagination\n\t *\n\t * @param {string} message_id The message id\n\t * @param {object} options    The pagination options\n\t *\n\t * @return {object} Server response\n\t */\n\tasync getReactions(message_id, options) {\n\t\tconst data = await this.getClient().get(\n\t\t\tthis.getClient().baseURL + `/messages/${message_id}/reactions`,\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\t\treturn data;\n\t}\n\n\t/**\n\t * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n\t * @return {date}\n\t */\n\tlastRead() {\n\t\tthis._checkInitialized();\n\t\treturn this.state.read[this.getClient().userID]\n\t\t\t? this.state.read[this.getClient().userID].last_read\n\t\t\t: null;\n\t}\n\n\t/**\n\t * countUnread - Count the number of messages with a date thats newer than the last read timestamp\n\t *\n\t * @param [date] lastRead the time that the user read a message, defaults to current user's read state\n\t *\n\t * @return {int} Unread count\n\t */\n\tcountUnread(lastRead) {\n\t\tif (lastRead == null) {\n\t\t\tlastRead = this.lastRead();\n\t\t}\n\t\tlet count = 0;\n\t\tfor (const m of this.state.messages) {\n\t\t\tif (this.getClient().userID === m.user.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (lastRead == null) {\n\t\t\t\tcount++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.created_at > lastRead) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * countUnread - Count the number of unread messages mentioning the current user\n\t *\n\t * @return {int} Unread mentions count\n\t */\n\tcountUnreadMentions() {\n\t\tconst lastRead = this.lastRead();\n\t\tlet count = 0;\n\t\tfor (const m of this.state.messages) {\n\t\t\tif (this.getClient().userID === m.user.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (lastRead == null) {\n\t\t\t\tcount++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.created_at > lastRead) {\n\t\t\t\tif (\n\t\t\t\t\tm.mentioned_users.map(u => u.id).indexOf(this.getClient().userID) !==\n\t\t\t\t\t-1\n\t\t\t\t) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * create - Creates a new channel\n\t *\n\t * @return {type} The Server Reponse\n\t */\n\tcreate = async () => {\n\t\tconst options = {\n\t\t\twatch: false,\n\t\t\tstate: false,\n\t\t\tpresence: false,\n\t\t};\n\t\treturn await this.query(options);\n\t};\n\n\t/**\n\t * query - Query the API, get messages, members or other channel fields\n\t *\n\t * @param {object} options The query options\n\t *\n\t * @return {object} Returns a query response\n\t */\n\tasync query(options) {\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.getClient().wsPromise;\n\n\t\tlet queryURL = `${this.getClient().baseURL}/channels/${this.type}`;\n\t\tif (this.id) {\n\t\t\tqueryURL += `/${this.id}`;\n\t\t}\n\n\t\tconst state = await this.getClient().post(queryURL + '/query', {\n\t\t\tdata: this._data,\n\t\t\tstate: true,\n\t\t\t...options,\n\t\t});\n\n\t\t// update the channel id if it was missing\n\t\tif (!this.id) {\n\t\t\tthis.id = state.channel.id;\n\t\t\tthis.cid = state.channel.cid;\n\t\t\t// set the channel as active...\n\t\t\tif (!(this.cid in this.getClient().activeChannels)) {\n\t\t\t\tthis.getClient().activeChannels[this.cid] = this;\n\t\t\t}\n\t\t}\n\n\t\tthis.getClient()._addChannelConfig(state);\n\n\t\t// add any messages to our channel state\n\t\tthis._initializeState(state);\n\n\t\treturn state;\n\t}\n\n\t/**\n\t * banUser - Bans a user from a channel\n\t *\n\t * @param targetUserID\n\t * @param options\n\t * @returns {Promise<*>}\n\t */\n\tasync banUser(targetUserID, options) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().banUser(targetUserID, {\n\t\t\t...options,\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t});\n\t}\n\n\t/**\n\t * hides the channel from queryChannels for the user until a message is added\n\t *\n\t * @param userId\n\t * @returns {Promise<*>}\n\t */\n\tasync hide(userId = null) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().post(`${this._channelURL()}/hide`, {\n\t\t\tuser_id: userId,\n\t\t});\n\t}\n\n\t/**\n\t * removes the hidden status for a channel\n\t *\n\t * @param userId\n\t * @returns {Promise<*>}\n\t */\n\tasync show(userId = null) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().post(`${this._channelURL()}/show`, {\n\t\t\tuser_id: userId,\n\t\t});\n\t}\n\n\t/**\n\t * banUser - Removes the bans for a user on a channel\n\t *\n\t * @param targetUserID\n\t * @returns {Promise<*>}\n\t */\n\tasync unbanUser(targetUserID) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().unbanUser(targetUserID, {\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t});\n\t}\n\n\t/**\n\t * on - Listen to events on this channel.\n\t *\n\t * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n\t * or\n\t * channel.on(event => {console.log(event.type)})\n\t *\n\t * @param {string} callbackOrString  The event type to listen for (optional)\n\t * @param {function} callbackOrNothing The callback to call\n\t *\n\t * @return {type} Description\n\t */\n\ton(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`Attaching listener for ${key} event on channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tthis.listeners[key].push(callback);\n\t}\n\n\t/**\n\t * off - Remove the event handler\n\t *\n\t */\n\toff(callbackOrString, callbackOrNothing) {\n\t\tthis._checkInitialized();\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`Removing listener for ${key} event from channel ${this.cid}`,\n\t\t\t{ tags: ['event', 'channel'], channel: this },\n\t\t);\n\t\tthis.listeners[key] = this.listeners[key].filter(value => value !== callback);\n\t}\n\n\t_handleChannelEvent(event) {\n\t\tconst channel = this;\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tconst s = channel.state;\n\t\tswitch (event.type) {\n\t\t\tcase 'typing.start':\n\t\t\t\ts.typing = s.typing.set(event.user.id, Immutable(event));\n\t\t\t\tbreak;\n\t\t\tcase 'typing.stop':\n\t\t\t\ts.typing = s.typing.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'message.read':\n\t\t\t\ts.read = s.read.set(\n\t\t\t\t\tevent.user.id,\n\t\t\t\t\tImmutable({ user: { ...event.user }, last_read: event.received_at }),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'user.watching.start':\n\t\t\tcase 'user.updated':\n\t\t\t\ts.watchers = s.watchers.set(event.user.id, Immutable(event.user));\n\t\t\t\tbreak;\n\t\t\tcase 'user.watching.stop':\n\t\t\t\ts.watchers = s.watchers.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'message.new':\n\t\t\tcase 'message.updated':\n\t\t\tcase 'message.deleted':\n\t\t\t\ts.addMessageSorted(event.message);\n\t\t\t\tbreak;\n\t\t\tcase 'member.added':\n\t\t\tcase 'member.updated':\n\t\t\t\ts.members = s.members.set(event.member.user_id, Immutable(event.member));\n\t\t\t\tbreak;\n\t\t\tcase 'member.removed':\n\t\t\t\ts.members = s.members.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'channel.updated':\n\t\t\t\tchannel.data = Immutable(event.channel);\n\t\t\t\tbreak;\n\t\t\tcase 'reaction.new':\n\t\t\t\ts.addReaction(event.reaction, event.message);\n\t\t\t\tbreak;\n\t\t\tcase 'reaction.deleted':\n\t\t\t\ts.removeReaction(event.reaction, event.message);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\t// any event can send over the online count\n\t\tif (event.watcher_count !== undefined) {\n\t\t\tchannel.state.watcher_count = event.watcher_count;\n\t\t}\n\t}\n\n\t_callChannelListeners = event => {\n\t\tconst channel = this;\n\t\t// gather and call the listeners\n\t\tconst listeners = [];\n\t\tif (channel.listeners.all) {\n\t\t\tlisteners.push(...channel.listeners.all);\n\t\t}\n\t\tif (channel.listeners[event.type]) {\n\t\t\tlisteners.push(...channel.listeners[event.type]);\n\t\t}\n\n\t\t// call the event and send it to the listeners\n\t\tfor (const listener of listeners) {\n\t\t\tlistener(event);\n\t\t}\n\t};\n\n\t/**\n\t * _channelURL - Returns the channel url\n\t *\n\t * @return {string} The channel url\n\t */\n\t_channelURL = () => {\n\t\tif (!this.id) {\n\t\t\tthrow new Error('channel id is not defined');\n\t\t}\n\t\tconst channelURL = `${this.getClient().baseURL}/channels/${this.type}/${this.id}`;\n\t\treturn channelURL;\n\t};\n\n\t_checkInitialized() {\n\t\tif (!this.initialized && !this.getClient()._isUsingServerAuth()) {\n\t\t\tthrow Error(\n\t\t\t\t`Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n\t\t\t);\n\t\t}\n\t}\n\n\t_initializeState(state) {\n\t\t// add the Users\n\t\tif (state.members) {\n\t\t\tfor (const m of state.members) {\n\t\t\t\tthis.getClient().state.updateUserReference(m.user, this.cid);\n\t\t\t}\n\t\t}\n\n\t\tif (state.watchers) {\n\t\t\tfor (const w of state.watchers) {\n\t\t\t\tthis.getClient().state.updateUserReference(w.user, this.cid);\n\t\t\t}\n\t\t}\n\n\t\t// immutable list of maps\n\t\tconst messages = state.messages || [];\n\t\tif (!this.state.messages) {\n\t\t\tthis.state.messages = Immutable([]);\n\t\t}\n\t\tthis.state.addMessagesSorted(messages, true);\n\t\tthis.state.watcher_count = state.watcher_count;\n\t\t// convert the arrays into objects for easier syncing...\n\t\tif (state.watchers) {\n\t\t\tfor (const watcher of state.watchers) {\n\t\t\t\tthis.state.watchers = this.state.watchers.set(watcher.id, watcher);\n\t\t\t}\n\t\t}\n\t\tif (state.read) {\n\t\t\tif (this.getClient().userID != null) {\n\t\t\t\tthis.state.read = this.state.read.set(\n\t\t\t\t\tthis.getClient().user.id,\n\t\t\t\t\tnew Date(0),\n\t\t\t\t);\n\t\t\t}\n\t\t\tfor (const read of state.read) {\n\t\t\t\tconst parsedRead = Object.assign({ ...read });\n\t\t\t\tparsedRead.last_read = new Date(read.last_read);\n\t\t\t\tthis.state.read = this.state.read.set(read.user.id, parsedRead);\n\t\t\t}\n\t\t}\n\t\tif (state.members) {\n\t\t\tfor (const m of state.members) {\n\t\t\t\tthis.state.members = this.state.members.set(m.user.id, m);\n\t\t\t}\n\t\t}\n\t}\n\n\t_disconnect() {\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:disconnect() - Disconnecting the channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['connection', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tthis.disconnected = true;\n\t}\n}\n","import Immutable from 'seamless-immutable';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState {\n\tconstructor() {\n\t\t// show the status for a certain user...\n\t\t// ie online, offline etc\n\t\tthis.users = Immutable({});\n\t\t// store which channels contain references to the specified user...\n\t\tthis.userChannelReferences = {};\n\t}\n\n\tupdateUsers(users) {\n\t\tfor (const user of users) {\n\t\t\tthis.updateUser(user);\n\t\t}\n\t}\n\n\tupdateUser(user) {\n\t\tif (user != null) {\n\t\t\tthis.users = this.users.set(user.id, Immutable(user));\n\t\t}\n\t}\n\n\tupdateUserReference(user, channelID) {\n\t\tif (user == null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.updateUser(user);\n\t\tif (!this.userChannelReferences[user.id]) {\n\t\t\tthis.userChannelReferences[user.id] = {};\n\t\t}\n\t\tthis.userChannelReferences[user.id][channelID] = true;\n\t}\n}\n","import isoWS from 'isomorphic-ws';\nimport { sleep } from './utils';\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection {\n\tconstructor({\n\t\twsURL,\n\t\tclientID,\n\t\tuserID,\n\t\tmessageCallback,\n\t\trecoverCallback,\n\n\t\teventCallback,\n\t\tlogger,\n\t}) {\n\t\tthis.wsURL = wsURL;\n\t\tthis.clientID = clientID;\n\t\tthis.userID = userID;\n\t\t/** consecutive failures influence the duration of the timeout */\n\t\tthis.consecutiveFailures = 0;\n\t\t/** keep track of the total number of failures */\n\t\tthis.totalFailures = 0;\n\n\t\t/** We only make 1 attempt to reconnect at the same time.. */\n\t\tthis.isConnecting = false;\n\t\t/** Boolean that indicates if we have a working connection to the server */\n\t\tthis.isHealthy = false;\n\n\t\t/** Callback when the connection fails and recovers */\n\t\tthis.recoverCallback = recoverCallback;\n\t\tthis.messageCallback = messageCallback;\n\t\tthis.eventCallback = eventCallback;\n\n\t\tthis.logger = logger;\n\n\t\t/** Incremented when a new WS connection is made */\n\t\tthis.wsID = 1;\n\n\t\t/** Store the last event time for health checks */\n\t\tthis.lastEvent = null;\n\n\t\t/** Send a health check message every 30 seconds */\n\t\tthis.healthCheckInterval = 30 * 1000;\n\t\t/** Every second we verify that we didn't miss any health checks */\n\t\tthis.monitorInterval = 1 * 1000;\n\n\t\tthis._listenForConnectionChanges();\n\t}\n\n\t/**\n\t * connect - Connect to the WS URL\n\t *\n\t * @return {promise} Promise that completes once the first health check message is received\n\t */\n\tasync connect() {\n\t\tlet healthCheck;\n\t\tif (this.isConnecting) {\n\t\t\tthrow Error(\n\t\t\t\t`You've called connect twice, can only attempt 1 connection at the time`,\n\t\t\t);\n\t\t}\n\t\ttry {\n\t\t\tthis.isConnecting = true;\n\t\t\thealthCheck = await this._connect();\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.consecutiveFailures = 0;\n\t\t\tthis._startMonitor();\n\t\t\tthis._startHealthCheck();\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:connect() - Established ws connection with healthcheck: ${healthCheck}`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn healthCheck;\n\t\t} catch (e) {\n\t\t\tthis.isConnecting = false;\n\t\t\tif (!e.isWSFailure) {\n\t\t\t\t// This is a permanent failure, throw the error...\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * disconnect - Disconnect the connection and doesn't recover...\n\t *\n\t */\n\tdisconnect() {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`connection:disconnect() - Closing the websocket connection for wsID ${this.wsID}`,\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\n\t\t// start by removing all the listeners\n\t\tif (this.healthCheckIntervalRef) {\n\t\t\tclearInterval(this.healthCheckIntervalRef);\n\t\t}\n\t\tif (this.monitorIntervalRef) {\n\t\t\tclearInterval(this.monitorIntervalRef);\n\t\t}\n\n\t\tthis._removeConnectionListeners();\n\n\t\t// reset the wsID;\n\t\tthis.wsID = 1;\n\t\tthis.isHealthy = false;\n\n\t\t// remove ws handlers...\n\t\tif (this.ws && this.ws.removeAllListeners) {\n\t\t\tthis.ws.removeAllListeners();\n\t\t}\n\n\t\tlet isClosedPromise;\n\t\t// and finally close...\n\t\tif (this.ws && this.ws.close) {\n\t\t\t// Assigning to local here because we will remove it from this before the\n\t\t\t// promise resolves.\n\t\t\tconst { ws } = this;\n\t\t\tisClosedPromise = new Promise(resolve => {\n\t\t\t\tws.onclose = () => {\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t});\n\t\t\tws.close(1000, 'Manually closed connection by calling client.disconnect()');\n\t\t}\n\n\t\tdelete this.ws;\n\n\t\treturn isClosedPromise;\n\t}\n\n\t/**\n\t * _connect - Connect to the WS endpoint\n\t *\n\t * @return {promise} Promise that completes once the first health check message is received\n\t */\n\tasync _connect() {\n\t\tthis._setupConnectionPromise();\n\t\tthis.ws = new isoWS(this.wsURL);\n\t\tthis.ws.onopen = this.onopen.bind(this, this.wsID);\n\t\tthis.ws.onclose = this.onclose.bind(this, this.wsID);\n\t\tthis.ws.onerror = this.onerror.bind(this, this.wsID);\n\t\tthis.ws.onmessage = this.onmessage.bind(this, this.wsID);\n\n\t\tconst response = await this.connectionOpen;\n\t\tthis.connectionID = response.connection_id;\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * _reconnect - Description\n\t *\n\t * @param {int} interval number of ms to wait before connecting\n\t */\n\tasync _reconnect(interval) {\n\t\tthis.logger('info', 'connection:_reconnect() - Initiating the reconnect', {\n\t\t\ttags: ['connection'],\n\t\t});\n\t\t// only allow 1 connection at the time\n\t\tif (this.isConnecting || this.isHealthy) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:_reconnect() - Abort (1) since already connecting or healthy',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// reconnect in case of on error or on close\n\t\t// also reconnect if the health check cycle fails\n\t\tif (interval === undefined) {\n\t\t\tinterval = this._retryInterval();\n\t\t}\n\n\t\t// reconnect, or try again after a little while...\n\t\tawait sleep(interval);\n\n\t\t// Check once again if by some other call to _reconnect is active or connection is\n\t\t// already restored, then no need to proceed.\n\t\tif (this.isConnecting || this.isHealthy) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:_reconnect() - Abort (2) since already connecting or healthy',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.isConnecting = true;\n\n\t\t// cleanup the old connection\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t'connection:_reconnect() : Destroying current WS connection',\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\t\tthis._destroyCurrentWSConnection();\n\n\t\ttry {\n\t\t\tconst open = await this._connect();\n\t\t\tif (this.recoverCallback) {\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() : Waiting for recoverCallBack',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tawait this.recoverCallback(open);\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() : Finished recoverCallBack',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.consecutiveFailures = 0;\n\t\t} catch (e) {\n\t\t\tthis.isConnecting = false;\n\t\t\t// reconnect on WS failures, dont reconnect if there is a code bug\n\t\t\tif (e.isWSFailure) {\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() : WS failure, so going to try to reconnect',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tthis._reconnect();\n\t\t\t}\n\t\t}\n\t\tthis.logger('info', 'connection:_reconnect() : == END ==', {\n\t\t\ttags: ['connection'],\n\t\t});\n\t}\n\n\t/**\n\t * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n\t *\n\t * @param {object} event Event with type online or offline\n\t *\n\t */\n\tonlineStatusChanged = event => {\n\t\tif (event.type === 'offline') {\n\t\t\t// mark the connection as down\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:onlineStatusChanged() : Status changing to offline',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis._setHealth(false);\n\t\t} else if (event.type === 'online') {\n\t\t\t// retry right now...\n\t\t\t// We check this.isHealthy, not sure if it's always\n\t\t\t// smart to create a new WS connection if the old one is still up and running.\n\t\t\t// it's possible we didnt miss any messages, so this process is just expensive and not needed.\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:onlineStatusChanged() : Status changing to online. isHealthy: ${this.isHealthy}`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (!this.isHealthy) {\n\t\t\t\tthis._reconnect(10);\n\t\t\t}\n\t\t}\n\t};\n\n\tonopen = wsID => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\t// set healthy..\n\t\tthis._setHealth(true);\n\t};\n\n\tonmessage = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\t// we wait till the first message before we consider the connection open..\n\t\t// the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n\t\t// after that a ws.onclose..\n\t\tif (!this.isResolved) {\n\t\t\tthis.resolvePromise(event);\n\t\t}\n\n\t\t// trigger the event..\n\t\tthis.lastEvent = new Date();\n\t\tthis.messageCallback(event);\n\t};\n\n\tonclose = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\tif (event.code === 1000) {\n\t\t\t// this is a permanent error raised by stream..\n\t\t\t// usually caused by invalid auth details\n\t\t\tconst error = new Error(`WS connection reject with error ${event.reason}`);\n\t\t\terror.reason = event.reason;\n\t\t\tthis.rejectPromise(error);\n\t\t} else {\n\t\t\tthis.consecutiveFailures += 1;\n\t\t\tthis.totalFailures += 1;\n\t\t\tthis._setHealth(false);\n\n\t\t\tthis.rejectPromise(this._errorFromWSEvent(event));\n\n\t\t\t// reconnect if its an abnormal failure\n\t\t\tthis._reconnect();\n\t\t}\n\t};\n\n\tonerror = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\tthis.consecutiveFailures += 1;\n\t\tthis.totalFailures += 1;\n\t\tthis._setHealth(false);\n\n\t\tthis.rejectPromise(this._errorFromWSEvent(event));\n\n\t\tthis._reconnect();\n\t};\n\n\t/**\n\t * _setHealth - Sets the connection to healthy or unhealthy.\n\t * Broadcasts an event in case the connection status changed.\n\t *\n\t * @param {bool} healthy boolean indicating if the connection is healthy or not\n\t *\n\t */\n\t_setHealth = healthy => {\n\t\tif (healthy && !this.isHealthy) {\n\t\t\t// yee we are online:\n\t\t\tthis.isHealthy = true;\n\t\t\tthis.eventCallback({\n\t\t\t\ttype: 'connection.changed',\n\t\t\t\tonline: true,\n\t\t\t});\n\t\t}\n\n\t\tif (!healthy && this.isHealthy) {\n\t\t\t// bummer we are offline\n\t\t\tthis.isHealthy = false;\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (!this.isHealthy) {\n\t\t\t\t\tthis.eventCallback({\n\t\t\t\t\t\ttype: 'connection.changed',\n\t\t\t\t\t\tonline: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 5000);\n\t\t}\n\t};\n\n\t/**\n\t * _errorFromWSEvent - Creates an error object for the WS event\n\t *\n\t */\n\t_errorFromWSEvent = event => {\n\t\tconst error = new Error(`WS failed with code ${event.code}`);\n\t\terror.code = event.code;\n\t\terror.isWSFailure = true;\n\t\treturn error;\n\t};\n\n\t/**\n\t * _listenForConnectionChanges - Adds an event listener for the browser going online or offline\n\t *\n\t */\n\t_listenForConnectionChanges = () => {\n\t\tif (\n\t\t\ttypeof window !== 'undefined' &&\n\t\t\twindow != null &&\n\t\t\twindow.addEventListener != null\n\t\t) {\n\t\t\twindow.addEventListener('offline', this.onlineStatusChanged);\n\t\t\twindow.addEventListener('online', this.onlineStatusChanged);\n\t\t}\n\t};\n\n\t_removeConnectionListeners = () => {\n\t\tif (\n\t\t\ttypeof window !== 'undefined' &&\n\t\t\twindow != null &&\n\t\t\twindow.addEventListener != null\n\t\t) {\n\t\t\twindow.removeEventListener('offline', this.onlineStatusChanged);\n\t\t\twindow.removeEventListener('online', this.onlineStatusChanged);\n\t\t}\n\t};\n\n\t/**\n\t * _destroyCurrentWSConnection - Removes the current WS connnection\n\t *\n\t */\n\t_destroyCurrentWSConnection() {\n\t\t// increment the ID, meaning we will ignore all messages from the old\n\t\t// ws connection from now on.\n\t\tthis.wsID += 1;\n\n\t\ttry {\n\t\t\tif (this.ws && this.ws.removeAllListeners) {\n\t\t\t\tthis.ws.removeAllListeners();\n\t\t\t}\n\n\t\t\tif (this.ws && this.ws.close) {\n\t\t\t\tthis.ws.close();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// we dont care\n\t\t}\n\t}\n\n\t/**\n\t * _retryInterval - A retry interval which increases after consecutive failures\n\t *\n\t * @return {int} Duration to wait in milliseconds\n\t */\n\t_retryInterval() {\n\t\t// try to reconnect in 0-5 seconds (random to spread out the load from failures)\n\t\tconst max = Math.min(500 + this.consecutiveFailures * 2000, 25000);\n\t\tconst min = Math.min(Math.max(250, (this.consecutiveFailures - 1) * 2000), 25000);\n\t\treturn Math.floor(Math.random() * (max - min) + min);\n\t}\n\n\t/**\n\t * _setupPromise - sets up the this.connectOpen promise\n\t */\n\t_setupConnectionPromise = () => {\n\t\tconst that = this;\n\t\tthis.isResolved = false;\n\t\t/** a promise that is resolved once ws.open is called */\n\t\tthis.connectionOpen = new Promise(function(resolve, reject) {\n\t\t\tthat.resolvePromise = resolve;\n\t\t\tthat.rejectPromise = reject;\n\t\t}).then(e => {\n\t\t\tconst data = JSON.parse(e.data);\n\t\t\tif (data.error != null) {\n\t\t\t\tthrow new Error(JSON.stringify(data.error));\n\t\t\t}\n\t\t\treturn data;\n\t\t});\n\t};\n\n\t/**\n\t * _startHealthCheck - Sends a message every 30s or so to see if the ws connection still works\n\t *\n\t */\n\t_startHealthCheck() {\n\t\tconst that = this;\n\t\t// 30 seconds is the recommended interval (messenger uses this)\n\t\tthis.healthCheckIntervalRef = setInterval(() => {\n\t\t\t// send the healthcheck.., server replies with a health check event\n\t\t\tconst data = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'health.check',\n\t\t\t\t\tclient_id: that.clientID,\n\t\t\t\t\tuser_id: that.userID,\n\t\t\t\t},\n\t\t\t];\n\t\t\t// try to send on the connection\n\t\t\ttry {\n\t\t\t\tthat.ws.send(JSON.stringify(data));\n\t\t\t} catch (e) {\n\t\t\t\t// error will already be detected elsewhere\n\t\t\t}\n\t\t}, that.healthCheckInterval);\n\t}\n\n\t/**\n\t * _startMonitor - Verifies we didn't miss any events. Marks the connection as failed in case we did.\n\t *\n\t */\n\t_startMonitor() {\n\t\tconst that = this;\n\t\tthis.monitorIntervalRef = setInterval(() => {\n\t\t\tconst now = new Date();\n\t\t\t// means we missed a health check\n\t\t\tif (now - that.lastEvent > this.healthCheckInterval + 10 * 1000) {\n\t\t\t\tthis.logger('info', 'connection:_startMonitor - going to reconnect', {\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t});\n\t\t\t\tthat._setHealth(false);\n\t\t\t\tthat._reconnect();\n\t\t\t}\n\t\t}, that.monitorInterval);\n\t}\n}\n","import jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserSessionToken\n * @memberof signing\n * @private\n * @param {string} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {object} [extraData] - Extra that should be part of the JWT token\n * @param {object} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(apiSecret, userId, extraData = {}, jwtOptions = {}) {\n\tif (typeof userId !== 'string') {\n\t\tthrow new TypeError('userId should be a string');\n\t}\n\n\tconst payload = {\n\t\tuser_id: userId,\n\t\t...extraData,\n\t};\n\n\tconst opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\treturn jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret, jwtOptions = {}) {\n\tconst payload = {\n\t\tserver: true,\n\t};\n\n\tconst opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\treturn jwt.sign(payload, apiSecret, opts);\n}\n\nfunction decodeBase64(s) {\n\tconst e = {},\n\t\tw = String.fromCharCode,\n\t\tL = s.length;\n\tlet i,\n\t\tb = 0,\n\t\tc,\n\t\tx,\n\t\tl = 0,\n\t\ta,\n\t\tr = '';\n\tconst A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\tfor (i = 0; i < 64; i++) {\n\t\te[A.charAt(i)] = i;\n\t}\n\tfor (x = 0; x < L; x++) {\n\t\tc = e[s.charAt(x)];\n\t\tb = (b << 6) + c;\n\t\tl += 6;\n\t\twhile (l >= 8) {\n\t\t\t((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n\t\t}\n\t}\n\treturn r;\n}\n\n/**\n * @return {string}\n */\nexport function UserFromToken(token) {\n\tconst fragments = token.split('.');\n\tif (fragments.length !== 3) {\n\t\treturn '';\n\t}\n\tconst b64Payload = fragments[1];\n\tconst payload = decodeBase64(b64Payload);\n\tconst data = JSON.parse(payload);\n\treturn data.user_id;\n}\n\nfunction encodeBase64(s) {\n\tif (typeof window !== 'undefined' && window.btoa) {\n\t\treturn window.btoa(s);\n\t} else {\n\t\treturn Buffer.from(s.toString(), 'binary').toString('base64');\n\t}\n}\n\n/**\n *\n * @param userId {string} the id of the user\n * @return {string}\n */\nexport function DevToken(userId) {\n\treturn [\n\t\t'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n\t\tencodeBase64(JSON.stringify({ user_id: userId })),\n\t\t'devtoken', // hardcoded signature\n\t].join('.');\n}\n\n/**\n *\n * @param body {string} the signed message\n * @param secret {string} the shared secret used to generate the signature (Stream API secret)\n * @param signature {string} the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body, secret, signature) {\n\tconst key = Buffer.from(secret, 'ascii');\n\tconst hash = crypto\n\t\t.createHmac('sha256', key)\n\t\t.update(body)\n\t\t.digest('hex');\n\treturn hash === signature;\n}\n","/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport axios from 'axios';\nimport uuidv4 from 'uuid/v4';\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\n\nimport { isValidEventType } from './events';\n\nimport {\n\tJWTServerToken,\n\tJWTUserToken,\n\tUserFromToken,\n\tDevToken,\n\tCheckSignature,\n} from './signing';\nimport http from 'http';\nimport https from 'https';\nimport fetch, { Headers } from 'cross-fetch';\nimport FormData from 'form-data';\nimport pkg from '../package.json';\n\nfunction isReadableStream(obj) {\n\treturn (\n\t\tobj !== null &&\n\t\ttypeof obj === 'object' &&\n\t\ttypeof obj._read === 'function' &&\n\t\ttypeof obj._readableState === 'object'\n\t);\n}\n\nfunction isFunction(value) {\n\treturn (\n\t\tvalue &&\n\t\t(Object.prototype.toString.call(value) === '[object Function]' ||\n\t\t\t'function' === typeof value ||\n\t\t\tvalue instanceof Function)\n\t);\n}\n\nexport class StreamChat {\n\tconstructor(key, secretOrOptions, options) {\n\t\t// set the key\n\t\tthis.key = key;\n\t\tthis.userToken = null;\n\t\tthis.secret = null;\n\t\tthis.listeners = {};\n\t\tthis.state = new ClientState();\n\n\t\t// set the secret\n\t\tif (secretOrOptions && secretOrOptions.indexOf) {\n\t\t\tthis.secret = secretOrOptions;\n\t\t}\n\n\t\t// set the options... and figure out defaults...\n\t\toptions = options || secretOrOptions;\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tthis.browser =\n\t\t\ttypeof options.browser !== 'undefined'\n\t\t\t\t? options.browser\n\t\t\t\t: typeof window !== 'undefined';\n\t\tthis.node = !this.browser;\n\n\t\tconst defaultOptions = {\n\t\t\ttimeout: 3000,\n\t\t};\n\n\t\tif (this.node) {\n\t\t\tconst nodeOptions = {\n\t\t\t\thttpAgent: new http.Agent({ keepAlive: 3000 }),\n\t\t\t\thttpsAgent: new https.Agent({ keepAlive: 3000 }),\n\t\t\t};\n\t\t\tthis.options = { ...nodeOptions, ...defaultOptions, ...options };\n\t\t} else {\n\t\t\tthis.options = { ...defaultOptions, ...options };\n\t\t\tdelete this.options.httpAgent;\n\t\t\tdelete this.options.httpsAgent;\n\t\t}\n\n\t\tthis.setBaseURL('https://chat-us-east-1.stream-io-api.com');\n\n\t\tif (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n\t\t\tthis.setBaseURL('http://localhost:3030');\n\t\t}\n\n\t\t// WS connection is initialized when setUser is called\n\t\tthis.wsConnection = null;\n\t\tthis.wsPromise = null;\n\t\t// keeps a reference to all the channels that are in use\n\t\tthis.activeChannels = {};\n\t\t// mapping between channel groups and configs\n\t\tthis.configs = {};\n\t\tthis.anonymous = false;\n\n\t\t/**\n\t\t * logger function should accept 3 parameters:\n\t\t * @param logLevel string\n\t\t * @param message   string\n\t\t * @param extraData object\n\t\t *\n\t\t * e.g.,\n\t\t * const client = new StreamChat('api_key', {}, {\n\t\t * \t\tlogger = (logLevel, message, extraData) => {\n\t\t * \t\t\tconsole.log(message);\n\t\t * \t\t}\n\t\t * })\n\t\t *\n\t\t * extraData contains tags array attached to log message. Tags can have one/many of following values:\n\t\t * 1. api\n\t\t * 2. api_request\n\t\t * 3. api_response\n\t\t * 4. client\n\t\t * 5. channel\n\t\t * 6. connection\n\t\t * 7. event\n\t\t *\n\t\t * It may also contains some extra data, some examples have been mentioned below:\n\t\t * 1. {\n\t\t * \t\ttags: ['api', 'api_request', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\tpayload: object,\n\t\t * \t\tconfig: object\n\t\t * }\n\t\t * 2. {\n\t\t * \t\ttags: ['api', 'api_response', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\tresponse: object\n\t\t * }\n\t\t * 3. {\n\t\t * \t\ttags: ['api', 'api_response', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\terror: object\n\t\t * }\n\t\t * 4. {\n\t\t * \t\ttags: ['event', 'client'],\n\t\t * \t\tevent: object\n\t\t * }\n\t\t * 5. {\n\t\t * \t\ttags: ['channel'],\n\t\t * \t\tchannel: object\n\t\t * }\n\t\t */\n\t\tthis.logger = isFunction(options.logger) ? options.logger : () => {};\n\t}\n\n\tdevToken(userID) {\n\t\treturn DevToken(userID);\n\t}\n\n\tgetAuthType() {\n\t\treturn this.anonymous ? 'anonymous' : 'jwt';\n\t}\n\n\tsetBaseURL(baseURL) {\n\t\tthis.baseURL = baseURL;\n\t\tthis.wsBaseURL = this.baseURL.replace('http', 'ws');\n\t}\n\n\t_setupConnection() {\n\t\tthis.UUID = uuidv4();\n\t\tthis.clientID = `${this.userID}--${this.UUID}`;\n\t\tthis.wsPromise = this.connect();\n\t\tthis._startCleaning();\n\t\treturn this.wsPromise;\n\t}\n\n\t_hasConnectionID = () => Boolean(this.connectionID);\n\n\t/**\n\t * setUser - Set the current user, this triggers a connection to the API\n\t *\n\t * @param {object} user Data about this user. IE {name: \"john\"}\n\t * @param {string} userToken   Token\n\t *\n\t * @return {promise} Returns a promise that resolves when the connection is setup\n\t */\n\tsetUser(user, userToken) {\n\t\tif (this.userID) {\n\t\t\tthrow new Error(\n\t\t\t\t'Use client.disconnect() before trying to connect as a different user. setUser was called twice.',\n\t\t\t);\n\t\t}\n\t\t// we generate the client id client side\n\t\tthis.userID = user.id;\n\n\t\tif (!this.userID) {\n\t\t\tthrow new Error('The \"id\" field on the user is missing');\n\t\t}\n\n\t\tthis.userToken = userToken;\n\n\t\tif (userToken == null && this.secret != null) {\n\t\t\tthis.userToken = this.createToken(this.userID);\n\t\t}\n\n\t\tif (this.userToken == null) {\n\t\t\tthrow new Error('both userToken and api secret are not provided');\n\t\t}\n\n\t\tconst tokenUserId = UserFromToken(this.userToken);\n\t\tif (\n\t\t\tuserToken != null &&\n\t\t\t(tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'userToken does not have a user_id or is not matching with user.id',\n\t\t\t);\n\t\t}\n\t\tthis._setUser(user);\n\t\tthis.anonymous = false;\n\n\t\treturn this._setupConnection();\n\t}\n\n\t_setUser(user) {\n\t\t// this one is used by the frontend\n\t\tthis.user = user;\n\t\t// this one is actually used for requests...\n\t\tthis._user = { ...user };\n\t}\n\n\t/**\n\t * updateAppSettings - updates application settings\n\t *\n\t * @param {object} options App settings.\n\t * \t\tIE: {\n\t  \t\t\t\"apn_config\": {\n\t\t\t\t\t\"auth_type\": \"token\",\n\t\t\t\t\t\"auth_key\": fs.readFileSync(\n\t\t\t\t\t\t'./apn-push-auth-key.p8',\n\t\t\t\t\t\t'utf-8',\n\t\t\t\t\t),\n\t\t\t\t\t\"key_id\": \"keyid\",\n\t\t\t\t\t\"team_id\": \"teamid\", //either ALL these 3\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\",\n\t\t\t\t\t\"bundle_id\": \"com.apple.your.app\",\n\t\t\t\t\t\"development\": true\n\t\t\t\t},\n\t\t\t\t\"firebase_config\": {\n\t\t\t\t\t\"server_key\": \"server key from fcm\",\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\"\n\t\t\t\t},\n\t\t\t\t\"webhook_url\": \"https://acme.com/my/awesome/webhook/\"\n\t\t\t}\n\t */\n\tasync updateAppSettings(options) {\n\t\tif (options.apn_config && options.apn_config.p12_cert) {\n\t\t\toptions.apn_config.p12_cert = Buffer.from(\n\t\t\t\toptions.apn_config.p12_cert,\n\t\t\t).toString('base64');\n\t\t}\n\t\treturn await this.patch(this.baseURL + '/app', options);\n\t}\n\n\t/**\n\t * getAppSettings - retrieves application settings\n\t */\n\tasync getAppSettings() {\n\t\treturn await this.get(this.baseURL + '/app');\n\t}\n\n\t/**\n\t * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n\t *\n\t * @param {string} userID User ID. If user has no devices, it will error\n\t * @param {object} [data] Overrides for push templates/message used\n\t * \t\tIE: {\n\t\t\t\t  messageID: 'id-of-message',//will error if message does not exist\n\t\t\t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n\t\t\t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t}\n\t */\n\tasync testPushSettings(userID, data = {}) {\n\t\treturn await this.post(this.baseURL + '/check_push', {\n\t\t\tuser_id: userID,\n\t\t\t...(data.messageID ? { message_id: data.messageID } : {}),\n\t\t\t...(data.apnTemplate ? { apn_template: data.apnTemplate } : {}),\n\t\t\t...(data.firebaseTemplate\n\t\t\t\t? { firebase_template: data.firebaseTemplate }\n\t\t\t\t: {}),\n\t\t});\n\t}\n\n\t/**\n\t * disconnect - closes the WS connection\n\t */\n\tdisconnect() {\n\t\tthis.logger('info', 'client:disconnect() - Disconnecting the client', {\n\t\t\ttags: ['connection', 'client'],\n\t\t});\n\t\t// remove the user specific fields\n\t\tdelete this.user;\n\t\tdelete this._user;\n\t\tdelete this.userID;\n\n\t\tif (this.cleaningIntervalRef != null) {\n\t\t\tclearInterval(this.cleaningIntervalRef);\n\t\t\tthis.cleaningIntervalRef = null;\n\t\t}\n\n\t\tthis.anonymous = false;\n\t\tthis.userToken = null;\n\n\t\tthis.connectionEstablishedCount = 0;\n\n\t\tfor (const channel of Object.values(this.activeChannels)) {\n\t\t\tchannel._disconnect();\n\t\t}\n\t\t// ensure we no longer return inactive channels\n\t\tthis.activeChannels = {};\n\t\t// reset client state\n\t\tthis.state = new ClientState();\n\n\t\t// close the WS connection\n\t\tif (this.wsConnection) {\n\t\t\treturn this.wsConnection.disconnect();\n\t\t}\n\t}\n\n\tsetAnonymousUser() {\n\t\tthis.anonymous = true;\n\t\tthis.userID = uuidv4();\n\t\tthis._setUser({\n\t\t\tid: this.userID,\n\t\t\tanon: true,\n\t\t});\n\t\treturn this._setupConnection();\n\t}\n\n\t/**\n\t * setGuestUser - Setup a temporary guest user\n\t *\n\t * @param {object} user Data about this user. IE {name: \"john\"}\n\t *\n\t * @return {promise} Returns a promise that resolves when the connection is setup\n\t */\n\tasync setGuestUser(user) {\n\t\tlet response;\n\t\tthis.anonymous = true;\n\t\ttry {\n\t\t\tresponse = await this.post(this.baseURL + '/guest', { user });\n\t\t} catch (e) {\n\t\t\tthis.anonymous = false;\n\t\t\tthrow e;\n\t\t}\n\t\tthis.anonymous = false;\n\t\tconst {\n\t\t\tcreated_at,\n\t\t\tupdated_at,\n\t\t\tlast_active,\n\t\t\tonline,\n\t\t\t...guestUser\n\t\t} = response.user;\n\t\treturn await this.setUser(guestUser, response.access_token);\n\t}\n\n\t/**\n\t * createToken - Creates a token to authenticate this user. This function is used server side.\n\t * The resulting token should be passed to the client side when the users registers or logs in\n\t *\n\t * @param {string}   userID         The User ID\n\t * @param {string}   exp            The expiration time for the token expressed in the number of seconds since the epoch\n\t *\n\t * @return {string} Returns a token\n\t */\n\tcreateToken(userID, exp) {\n\t\tconst extra = {};\n\t\tif (exp != null) {\n\t\t\textra.exp = exp;\n\t\t}\n\t\treturn JWTUserToken(this.secret, userID, extra, {});\n\t}\n\n\t/**\n\t * on - Listen to events on all channels and users your watching\n\t *\n\t * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n\t * or\n\t * client.on(event => {console.log(event.type)})\n\t *\n\t * @param {string} callbackOrString  The event type to listen for (optional)\n\t * @param {function} callbackOrNothing The callback to call\n\t *\n\t * @return {type} Description\n\t */\n\ton(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\t\tthis.logger('info', `Attaching listener for ${key} event`, {\n\t\t\ttags: ['event', 'client'],\n\t\t});\n\t\tthis.listeners[key].push(callback);\n\t\treturn {\n\t\t\tunsubscribe: () => {\n\t\t\t\tthis.listeners[key] = this.listeners[key].filter(el => el !== callback);\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * off - Remove the event handler\n\t *\n\t */\n\toff(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\n\t\tthis.logger('info', `Removing listener for ${key} event`, {\n\t\t\ttags: ['event', 'client'],\n\t\t});\n\t\tthis.listeners[key] = this.listeners[key].filter(value => value !== callback);\n\t}\n\n\t_logApiRequest(type, url, data, config) {\n\t\tthis.logger('info', `client: ${type} - Request - ${url}`, {\n\t\t\ttags: ['api', 'api_request', 'client'],\n\t\t\turl,\n\t\t\tpayload: data,\n\t\t\tconfig,\n\t\t});\n\t}\n\n\t_logApiResponse(type, url, response) {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:${type} - Response - url: ${url} > status ${response.status}`,\n\t\t\t{\n\t\t\t\ttags: ['api', 'api_response', 'client'],\n\t\t\t\turl,\n\t\t\t\tresponse,\n\t\t\t},\n\t\t);\n\t}\n\n\t_logApiError(type, url, error) {\n\t\tthis.logger('error', `client:${type} - Error - url: ${url}`, {\n\t\t\ttags: ['api', 'api_response', 'client'],\n\t\t\turl,\n\t\t\terror,\n\t\t});\n\t}\n\n\tasync get(url, params) {\n\t\ttry {\n\t\t\tthis._logApiRequest('get', url, {}, this._addClientParams(params));\n\t\t\tconst response = await axios.get(url, this._addClientParams(params));\n\t\t\tthis._logApiResponse('get', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('get', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync put(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('put', url, data, this._addClientParams());\n\t\t\tresponse = await axios.put(url, data, this._addClientParams());\n\t\t\tthis._logApiResponse('put', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('get', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync post(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('post', url, data, this._addClientParams());\n\t\t\tresponse = await axios.post(url, data, this._addClientParams());\n\t\t\tthis._logApiResponse('post', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('post', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync patch(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('patch', url, data, this._addClientParams());\n\t\t\tresponse = await axios.patch(url, data, this._addClientParams());\n\t\t\tthis._logApiResponse('patch', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('patch', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync delete(url, params) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('delete', url, {}, this._addClientParams());\n\t\t\tresponse = await axios.delete(url, this._addClientParams(params));\n\t\t\tthis._logApiResponse('delete', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('delete', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendFile(url, uri, name, contentType, user) {\n\t\tconst data = new FormData();\n\t\tlet fileField;\n\n\t\tconst params = this._addClientParams();\n\t\tif (isReadableStream(uri) || uri instanceof File) {\n\t\t\tfileField = uri;\n\t\t} else {\n\t\t\tfileField = {\n\t\t\t\turi,\n\t\t\t\tname: name || uri.split('/').reverse()[0],\n\t\t\t};\n\t\t\tif (contentType != null) {\n\t\t\t\tfileField.type = contentType;\n\t\t\t}\n\t\t}\n\n\t\tif (user != null) {\n\t\t\tdata.append('user', JSON.stringify(user));\n\t\t}\n\t\tdata.append('file', fileField);\n\t\tconst response = await fetch(`${url}?api_key=${this.key}`, {\n\t\t\tmethod: 'post',\n\t\t\tbody: data,\n\t\t\theaders: new Headers({\n\t\t\t\tAuthorization: params.headers.Authorization,\n\t\t\t\t'stream-auth-type': this.getAuthType(),\n\t\t\t}),\n\t\t});\n\t\tresponse.data = await response.json();\n\t\treturn this.handleResponse(response);\n\t}\n\n\terrorFromResponse(response) {\n\t\tlet err;\n\t\terr = new Error(`StreamChat error HTTP code: ${response.status}`);\n\t\tif (response.data && response.data.code) {\n\t\t\terr = new Error(\n\t\t\t\t`StreamChat error code ${response.data.code}: ${response.data.message}`,\n\t\t\t);\n\t\t\terr.code = response.data.code;\n\t\t}\n\t\terr.response = response;\n\t\terr.status = response.status;\n\t\treturn err;\n\t}\n\n\thandleResponse(response) {\n\t\tconst data = response.data;\n\t\tif ((response.status + '')[0] !== '2') {\n\t\t\tthrow this.errorFromResponse(response);\n\t\t}\n\t\treturn data;\n\t}\n\n\tdispatchEvent = event => {\n\t\t// client event handlers\n\t\tthis._handleClientEvent(event);\n\n\t\t// channel event handlers\n\t\tconst cid = event.cid;\n\t\tconst channel = this.activeChannels[cid];\n\t\tif (channel) {\n\t\t\tchannel._handleChannelEvent(event);\n\t\t}\n\n\t\tthis._callClientListeners(event);\n\n\t\tif (channel) {\n\t\t\tchannel._callChannelListeners(event);\n\t\t}\n\t};\n\n\thandleEvent = messageEvent => {\n\t\t// dispatch the event to the channel listeners\n\t\tconst jsonString = messageEvent.data;\n\t\tconst event = JSON.parse(jsonString);\n\t\tevent.received_at = new Date();\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t_handleClientEvent(event) {\n\t\tconst client = this;\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:_handleClientEvent - Received event of type { ${event.type} }`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'client'],\n\t\t\t\tevent,\n\t\t\t},\n\t\t);\n\n\t\t// update the client.state with any changes to users\n\t\tif (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n\t\t\tif (event.user.id === this.userID) {\n\t\t\t\tthis.user = { ...this.user, ...event.user };\n\t\t\t\t// Updating only available properties in _user object.\n\t\t\t\tObject.keys(event.user).forEach(function(key) {\n\t\t\t\t\tif (key in client._user) {\n\t\t\t\t\t\tclient._user[key] = event.user[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tclient.state.updateUser(event.user);\n\t\t\tclient._updateUserReferences(event.user);\n\t\t}\n\t\tif (event.type === 'health.check') {\n\t\t\tif (event.me) {\n\t\t\t\tclient.user = event.me;\n\t\t\t\tclient.state.updateUser(event.me);\n\t\t\t}\n\t\t}\n\n\t\tif (event.type === 'notification.message_new') {\n\t\t\tthis.configs[event.channel.type] = event.channel.config;\n\t\t}\n\t}\n\n\t_callClientListeners = event => {\n\t\tconst client = this;\n\t\t// gather and call the listeners\n\t\tconst listeners = [];\n\t\tif (client.listeners.all) {\n\t\t\tlisteners.push(...client.listeners.all);\n\t\t}\n\t\tif (client.listeners[event.type]) {\n\t\t\tlisteners.push(...client.listeners[event.type]);\n\t\t}\n\n\t\t// call the event and send it to the listeners\n\t\tfor (const listener of listeners) {\n\t\t\tlistener(event);\n\t\t}\n\t};\n\n\trecoverState = async () => {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:recoverState() - Start of recoverState with connectionID ${this.wsConnection.connectionID}`,\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\t\tthis.connectionID = this.wsConnection.connectionID;\n\t\tconst cids = Object.keys(this.activeChannels || {});\n\t\tconst lastMessageIDs = {};\n\t\tfor (const c of Object.values(this.activeChannels)) {\n\t\t\tconst lastMessage = c.lastMessage();\n\t\t\tlet lastMessageId;\n\t\t\tif (lastMessage) {\n\t\t\t\tlastMessageId = lastMessage.id;\n\t\t\t}\n\t\t\tlastMessageIDs[c.cid] = lastMessageId;\n\t\t}\n\t\tif (cids.length) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`client:recoverState() - Start the querying of ${cids.length} channels`,\n\t\t\t\t{ tags: ['connection', 'client'] },\n\t\t\t);\n\n\t\t\tawait this.queryChannels(\n\t\t\t\t{ cid: { $in: cids } },\n\t\t\t\t{ last_message_at: -1 },\n\t\t\t\t{ limit: 30, recovery: true, last_message_ids: lastMessageIDs },\n\t\t\t);\n\n\t\t\tthis.logger('info', 'client:recoverState() - Querying channels finished', {\n\t\t\t\ttags: ['connection', 'client'],\n\t\t\t});\n\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'connection.recovered',\n\t\t\t});\n\t\t}\n\t};\n\n\t/*\n\t_updateUserReferences updates the members and watchers of the currently active channels\n\tthat contain this user\n\t*/\n\t_updateUserReferences(user) {\n\t\tconst refMap = this.state.userChannelReferences[user.id] || {};\n\t\tconst refs = Object.keys(refMap);\n\t\tfor (const channelID of refs) {\n\t\t\tconst c = this.activeChannels[channelID];\n\t\t\t// search the members and watchers and update as needed...\n\t\t\tif (c && c.state) {\n\t\t\t\tif (c.state.members[user.id]) {\n\t\t\t\t\tc.state.members = c.state.members.setIn([user.id, 'user'], user);\n\t\t\t\t}\n\t\t\t\tif (c.state.watchers[user.id]) {\n\t\t\t\t\tc.state.watchers = c.state.watchers.setIn([user.id, 'user'], user);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync connect() {\n\t\tthis.connecting = true;\n\t\tconst client = this;\n\t\tthis.failures = 0;\n\n\t\tif (client.userID == null) {\n\t\t\tthrow Error(\n\t\t\t\t'Call setUser or setAnonymousUser before starting the connection',\n\t\t\t);\n\t\t}\n\t\tconst params = {\n\t\t\tclient_id: client.client_id,\n\t\t\tuser_id: client.userID,\n\t\t\tuser_details: client._user,\n\t\t\tuser_token: client.userToken,\n\t\t\tserver_determines_connection_id: true,\n\t\t};\n\t\tconst qs = encodeURIComponent(JSON.stringify(params));\n\t\tif (qs.length > 1900) {\n\t\t\tthrow Error('User object is too large');\n\t\t}\n\n\t\tconst token = this._getToken();\n\n\t\tconst authType = this.getAuthType();\n\t\tclient.wsURL = `${client.wsBaseURL}/connect?json=${qs}&api_key=${\n\t\t\tthis.key\n\t\t}&authorization=${token}&stream-auth-type=${authType}&x-stream-client=${this._userAgent()}`;\n\n\t\t// The StableWSConnection handles all the reconnection logic.\n\t\tthis.wsConnection = new StableWSConnection({\n\t\t\twsURL: client.wsURL,\n\t\t\tclientID: this.clientID,\n\t\t\tuserID: this.userID,\n\t\t\trecoverCallback: this.recoverState,\n\t\t\tmessageCallback: this.handleEvent,\n\t\t\teventCallback: this.dispatchEvent,\n\t\t\tlogger: this.logger,\n\t\t});\n\n\t\tconst handshake = await this.wsConnection.connect();\n\t\tthis.connectionID = this.wsConnection.connectionID;\n\t\treturn handshake;\n\t}\n\n\t/**\n\t * queryUsers - Query users and watch user presence\n\t *\n\t * @param {object} filterConditions MongoDB style filter conditions\n\t * @param {object} sort             Sort options, for instance {last_active: -1}\n\t * @param {object} options          Option object, {presence: true}\n\t *\n\t * @return {object} User Query Response\n\t */\n\tasync queryUsers(filterConditions, sort, options) {\n\t\tif (!sort) {\n\t\t\tsort = {};\n\t\t}\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\t\tconst sortFields = [];\n\t\tfor (const [k, v] of Object.entries(sort)) {\n\t\t\tsortFields.push({ field: k, direction: v });\n\t\t}\n\n\t\tconst defaultOptions = {\n\t\t\tpresence: true,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.wsPromise;\n\n\t\tif (!this._hasConnectionID()) {\n\t\t\tdefaultOptions.presence = false;\n\t\t}\n\n\t\t// Return a list of users\n\t\tconst data = await this.get(this.baseURL + '/users', {\n\t\t\tpayload: {\n\t\t\t\tfilter_conditions: filterConditions,\n\t\t\t\tsort: sortFields,\n\t\t\t\t...defaultOptions,\n\t\t\t\t...options,\n\t\t\t},\n\t\t});\n\n\t\tthis.state.updateUsers(data.users);\n\n\t\treturn data;\n\t}\n\n\tasync queryChannels(filterConditions, sort = {}, options = {}) {\n\t\tconst sortFields = [];\n\n\t\tfor (const [k, v] of Object.entries(sort)) {\n\t\t\tsortFields.push({ field: k, direction: v });\n\t\t}\n\n\t\tconst defaultOptions = {\n\t\t\tstate: true,\n\t\t\twatch: true,\n\t\t\tpresence: false,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.wsPromise;\n\n\t\tif (!this._hasConnectionID()) {\n\t\t\tdefaultOptions.watch = false;\n\t\t}\n\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: filterConditions,\n\t\t\tsort: sortFields,\n\t\t\tuser_details: this._user,\n\t\t\t...defaultOptions,\n\t\t\t...options,\n\t\t};\n\n\t\tconst data = await this.get(this.baseURL + '/channels', {\n\t\t\tpayload,\n\t\t});\n\n\t\tconst channels = [];\n\n\t\t// update our cache of the configs\n\t\tfor (const channelState of data.channels) {\n\t\t\tthis._addChannelConfig(channelState);\n\t\t}\n\n\t\tfor (const channelState of data.channels) {\n\t\t\tconst c = this.channel(channelState.channel.type, channelState.channel.id);\n\t\t\tc.data = channelState.channel;\n\t\t\tc.initialized = true;\n\t\t\tc._initializeState(channelState);\n\t\t\tchannels.push(c);\n\t\t}\n\t\treturn channels;\n\t}\n\n\tasync search(filterConditions, query, options = {}) {\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: filterConditions,\n\t\t\tquery,\n\t\t\t...options,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.wsPromise;\n\n\t\tconst data = await this.get(this.baseURL + '/search', {\n\t\t\tpayload,\n\t\t});\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * addDevice - Adds a push device for a user.\n\t *\n\t * @param {string} id the device id\n\t * @param {string} push_provider the push provider (apn or firebase)\n\t * @param {string} [userID] the user id (defaults to current user)\n\t *\n\t */\n\tasync addDevice(id, push_provider, userID = null) {\n\t\treturn await this.post(this.baseURL + '/devices', {\n\t\t\tid,\n\t\t\tpush_provider,\n\t\t\t...(userID != null ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t/**\n\t * getDevices - Returns the devices associated with a current user\n\t *\n\t * @param {string} [userID] User ID. Only works on serversidex\n\t *\n\t * @return {devices} Array of devices\n\t */\n\tasync getDevices(userID) {\n\t\treturn await this.get(\n\t\t\tthis.baseURL + '/devices',\n\t\t\tuserID ? { user_id: userID } : {},\n\t\t);\n\t}\n\n\t/**\n\t * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n\t *\n\t * @param {string} id The device id\n\t * @param {string} [userID] The user id. Only specify this for serverside requests\n\t *\n\t */\n\tasync removeDevice(id, userID = null) {\n\t\treturn await this.delete(this.baseURL + '/devices', {\n\t\t\tid,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t_addChannelConfig(channelState) {\n\t\tthis.configs[channelState.channel.type] = channelState.channel.config;\n\t}\n\n\t/**\n\t * channel - Returns a new channel with the given type and id\n\t *\n\t * @param {string} channelType The channel type\n\t * @param {string} channelID   The channel data\n\t * @param {object} [custom]      Custom data to attach to the channel\n\t *\n\t * @return {channel} The channel object, initialize it using channel.watch()\n\t */\n\tchannel(channelType, channelID, custom = {}) {\n\t\tif (!this.userID && !this._isUsingServerAuth()) {\n\t\t\tthrow Error('Call setUser or setAnonymousUser before creating a channel');\n\t\t}\n\t\tif (~channelType.indexOf(':')) {\n\t\t\tthrow Error(\n\t\t\t\t`Invalid channel group ${channelType}, cant contain the : character`,\n\t\t\t);\n\t\t}\n\n\t\tif (typeof channelID === 'string') {\n\t\t\tchannelID = channelID + '';\n\t\t\tif (~channelID.indexOf(':')) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t`Invalid channel id ${channelID}, cant contain the : character`,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// support the 2 param init method\n\t\t\tcustom = channelID || {};\n\t\t\tchannelID = undefined;\n\t\t}\n\n\t\t// there are two ways of solving this,\n\t\t// a. only allow 1 channel object per cid\n\t\t// b. broadcast events to all channels\n\t\t// the first option seems less likely to trip up devs\n\t\tlet channel;\n\t\tif (channelID) {\n\t\t\tconst cid = `${channelType}:${channelID}`;\n\t\t\tif (cid in this.activeChannels) {\n\t\t\t\tchannel = this.activeChannels[cid];\n\t\t\t\tif (Object.keys(custom).length > 0) {\n\t\t\t\t\tchannel.data = custom;\n\t\t\t\t\tchannel._data = custom;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tchannel = new Channel(this, channelType, channelID, custom);\n\t\t\t\tthis.activeChannels[channel.cid] = channel;\n\t\t\t}\n\t\t} else {\n\t\t\tchannel = new Channel(this, channelType, undefined, custom);\n\t\t}\n\n\t\treturn channel;\n\t}\n\n\t/**\n\t * updateUser - Update or Create the given user object\n\t *\n\t * @param {object} A user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n\t *\n\t * @return {object}\n\t */\n\tasync updateUser(userObject) {\n\t\treturn await this.updateUsers([userObject]);\n\t}\n\n\t/**\n\t * partialUpdateUser - Update the given user object\n\t *\n\t * @param {object} Object which should contain id and any of \"set\" or \"unset\" params;\n\t * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n\t *\n\t * @return {object} list of updated users\n\t */\n\tasync partialUpdateUser(userObject) {\n\t\treturn await this.partialUpdateUsers([userObject]);\n\t}\n\n\t/**\n\t * updateUsers - Batch update the list of users\n\t *\n\t * @param {array} A list of users\n\t *\n\t * @return {object}\n\t */\n\tasync updateUsers(users) {\n\t\tconst userMap = {};\n\t\tfor (const userObject of users) {\n\t\t\tif (!userObject.id) {\n\t\t\t\tthrow Error('User ID is required when updating a user');\n\t\t\t}\n\t\t\tuserMap[userObject.id] = userObject;\n\t\t}\n\n\t\treturn await this.post(this.baseURL + '/users', {\n\t\t\tusers: userMap,\n\t\t});\n\t}\n\n\t/**\n\t * updateUsers - Batch partial update of users\n\t *\n\t * @param {array} A list of partial update requests\n\t *\n\t * @return {object}\n\t */\n\tasync partialUpdateUsers(users) {\n\t\tfor (const userObject of users) {\n\t\t\tif (!userObject.id) {\n\t\t\t\tthrow Error('User ID is required when updating a user');\n\t\t\t}\n\t\t}\n\n\t\treturn await this.patch(this.baseURL + '/users', {\n\t\t\tusers,\n\t\t});\n\t}\n\n\tasync deleteUser(userID, params) {\n\t\treturn await this.delete(this.baseURL + `/users/${userID}`, params);\n\t}\n\n\tasync reactivateUser(userID, options) {\n\t\treturn await this.post(this.baseURL + `/users/${userID}/reactivate`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync deactivateUser(userID, options) {\n\t\treturn await this.post(this.baseURL + `/users/${userID}/deactivate`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync exportUser(userID, options) {\n\t\treturn await this.get(this.baseURL + `/users/${userID}/export`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** banUser - bans a user from all channels\n\t *\n\t * @param targetUserID\n\t * @param options\n\t * @returns {Promise<*>}\n\t */\n\tasync banUser(targetUserID, options) {\n\t\treturn await this.post(this.baseURL + '/moderation/ban', {\n\t\t\ttarget_user_id: targetUserID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** unbanUser - revoke global ban for a user\n\t *\n\t * @param targetUserID\n\t * @returns {Promise<*>}\n\t */\n\tasync unbanUser(targetUserID, options) {\n\t\treturn await this.delete(this.baseURL + '/moderation/ban', {\n\t\t\ttarget_user_id: targetUserID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** muteUser - mutes a user\n\t *\n\t * @param targetID\n\t * @param [userID] Only used with serverside auth\n\t * @returns {Promise<*>}\n\t */\n\tasync muteUser(targetID, userID = null) {\n\t\treturn await this.post(this.baseURL + '/moderation/mute', {\n\t\t\ttarget_id: targetID,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t/** unmuteUser - unmutes a user\n\t *\n\t * @param targetID\n\t * @param [userID] Only used with serverside auth\n\t * @returns {Promise<*>}\n\t */\n\tasync unmuteUser(targetID, userID = null) {\n\t\treturn await this.post(this.baseURL + '/moderation/unmute', {\n\t\t\ttarget_id: targetID,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\tasync flagMessage(messageID) {\n\t\treturn await this.post(this.baseURL + '/moderation/flag', {\n\t\t\ttarget_message_id: messageID,\n\t\t});\n\t}\n\n\tasync flagUser(userID) {\n\t\treturn await this.post(this.baseURL + '/moderation/flag', {\n\t\t\ttarget_user_id: userID,\n\t\t});\n\t}\n\n\tasync unflagMessage(messageID) {\n\t\treturn await this.post(this.baseURL + '/moderation/unflag', {\n\t\t\ttarget_message_id: messageID,\n\t\t});\n\t}\n\n\tasync unflagUser(userID) {\n\t\treturn await this.post(this.baseURL + '/moderation/unflag', {\n\t\t\ttarget_user_id: userID,\n\t\t});\n\t}\n\n\t/**\n\t * markAllRead - marks all channels for this user as read\n\t *\n\t * @return {Promise} Description\n\t */\n\tasync markAllRead(data = {}) {\n\t\tconst response = await this.post(this.baseURL + '/channels/read', {\n\t\t\t...data,\n\t\t});\n\t}\n\n\tcreateChannelType(data) {\n\t\tconst channelData = Object.assign({}, { commands: ['all'] }, data);\n\t\treturn this.post(this.baseURL + '/channeltypes', channelData);\n\t}\n\n\tgetChannelType(channelType) {\n\t\treturn this.get(this.baseURL + `/channeltypes/${channelType}`);\n\t}\n\n\tupdateChannelType(channelType, data) {\n\t\treturn this.put(this.baseURL + `/channeltypes/${channelType}`, data);\n\t}\n\n\tdeleteChannelType(channelType) {\n\t\treturn this.delete(this.baseURL + `/channeltypes/${channelType}`);\n\t}\n\n\tlistChannelTypes() {\n\t\treturn this.get(this.baseURL + `/channeltypes`);\n\t}\n\n\t/**\n\t * updateMessage - Update the given message\n\t *\n\t * @param {object} message object, id needs to be specified\n\t *\n\t * @return {object} Response that includes the message\n\t */\n\tasync updateMessage(message, userId) {\n\t\tif (!message.id) {\n\t\t\tthrow Error('Please specify the message id when calling updateMesssage');\n\t\t}\n\n\t\tconst clonedMessage = Object.assign({}, message);\n\t\tdelete clonedMessage.id;\n\n\t\tconst reservedMessageFields = [\n\t\t\t'latest_reactions',\n\t\t\t'own_reactions',\n\t\t\t'reply_count',\n\t\t\t'reaction_counts',\n\t\t\t'created_at',\n\t\t\t'updated_at',\n\t\t\t'html',\n\t\t\t'command',\n\t\t\t'type',\n\t\t\t'user',\n\t\t];\n\n\t\treservedMessageFields.forEach(function(item) {\n\t\t\tif (clonedMessage[item] != null) {\n\t\t\t\tdelete clonedMessage[item];\n\t\t\t}\n\t\t});\n\n\t\tif (userId != null) {\n\t\t\tif (typeof userId == 'string' || userId instanceof String) {\n\t\t\t\tclonedMessage.user_id = userId;\n\t\t\t} else {\n\t\t\t\tclonedMessage.user = { id: userId.id };\n\t\t\t}\n\t\t}\n\t\treturn await this.post(this.baseURL + `/messages/${message.id}`, {\n\t\t\tmessage: clonedMessage,\n\t\t});\n\t}\n\n\tasync deleteMessage(messageID, hardDelete) {\n\t\tlet params = {};\n\t\tif (hardDelete) {\n\t\t\tparams = { hard: true };\n\t\t}\n\t\treturn await this.delete(this.baseURL + `/messages/${messageID}`, params);\n\t}\n\n\tasync getMessage(messageID) {\n\t\treturn await this.get(this.baseURL + `/messages/${messageID}`);\n\t}\n\n\t_userAgent() {\n\t\treturn `stream-chat-javascript-client-${this.node ? 'node' : 'browser'}-${\n\t\t\tpkg.version\n\t\t}`;\n\t}\n\n\t/**\n\t * _isUsingServerAuth - Returns true if we're using server side auth\n\t */\n\t_isUsingServerAuth = () => {\n\t\t// returns if were in server side mode or not...\n\t\tconst serverAuth = !!this.secret;\n\t\treturn serverAuth;\n\t};\n\n\t_addClientParams(params = {}) {\n\t\tconst token = this._getToken();\n\n\t\treturn {\n\t\t\t...this.options,\n\t\t\tparams: {\n\t\t\t\tuser_id: this.userID,\n\t\t\t\t...params,\n\t\t\t\tapi_key: this.key,\n\t\t\t\tconnection_id: this.connectionID,\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\tAuthorization: token,\n\t\t\t\t'stream-auth-type': this.getAuthType(),\n\t\t\t\t'x-stream-client': this._userAgent(),\n\t\t\t},\n\t\t};\n\t}\n\n\t_getToken() {\n\t\tif (this.secret == null && this.userToken == null && !this.anonymous) {\n\t\t\tthrow new Error(\n\t\t\t\t`Both secret and user tokens are not set. Either client.setUser wasn't called or client.disconnect was called`,\n\t\t\t);\n\t\t}\n\t\tlet token = '';\n\t\tif (!this.anonymous) {\n\t\t\ttoken = this.userToken != null ? this.userToken : JWTServerToken(this.secret);\n\t\t}\n\t\treturn token;\n\t}\n\n\t_startCleaning() {\n\t\tconst that = this;\n\t\tif (this.cleaningIntervalRef != null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.cleaningIntervalRef = setInterval(() => {\n\t\t\t// call clean on the channel, used for calling the stop.typing event etc.\n\t\t\tfor (const channel of Object.values(that.activeChannels)) {\n\t\t\t\tchannel.clean();\n\t\t\t}\n\t\t}, 500);\n\t}\n\n\tverifyWebhook(requestBody, xSignature) {\n\t\treturn CheckSignature(requestBody, this.secret, xSignature);\n\t}\n}\n"],"names":["byDate","a","b","created_at","ChannelState","channel","_channel","watcher_count","typing","Immutable","read","messages","threads","mutedUsers","watchers","members","last_message_at","Date","newMessage","addMessagesSorted","message","__html","html","updated_at","status","newMessages","initializing","parsedMessages","id","without","parsedMsg","messageToImmutable","push","updatedThreads","isThreadReply","parent_id","show_in_channel","_addToMessageList","parentID","thread","threadMessages","set","sort","reaction","i","length","_addReactionToMessage","idMatch","message_id","_removeReactionFromMessage","getClient","userID","user","update","old","concat","updateIn","type","filterReaction","filter","item","updated","messageToRemove","removed","flatMap","filteredMessages","now","Object","entries","lastEvent","since","received_at","dispatchEvent","cid","EVENT_MAP","isValidEventType","eventType","logChatPromiseExecution","promise","name","then","catch","error","console","warn","sleep","m","Promise","r","setTimeout","Channel","client","data","options","watch","state","presence","query","event","listeners","all","listener","Error","channelURL","baseURL","validTypeRe","validIDRe","test","_client","_data","initialized","lastTypingEvent","isTyping","disconnected","configs","post","_channelURL","uri","contentType","sendFile","url","delete","_checkInitialized","messageID","user_id","keys","body","reactionType","channelData","updateMessage","accept_invite","reject_invite","add_members","add_moderators","remove_members","demote_moderators","formData","form_data","getConfig","typing_events","diff","lastKeyStroke","sendEvent","min","max","messageSlice","slice","asMutable","lastMessage","read_events","resolve","response","stopTyping","clean","defaultOptions","wsPromise","_hasConnectionID","combined","_initializeState","logger","tags","get","last_read","lastRead","count","mentioned_users","map","u","indexOf","queryURL","activeChannels","_addChannelConfig","targetUserID","banUser","userId","unbanUser","callbackOrString","callbackOrNothing","key","valid","callback","value","s","addMessageSorted","member","addReaction","removeReaction","undefined","_isUsingServerAuth","updateUserReference","w","watcher","parsedRead","ClientState","users","userChannelReferences","updateUser","channelID","StableWSConnection","wsURL","clientID","messageCallback","recoverCallback","eventCallback","_setHealth","isHealthy","_reconnect","wsID","isResolved","resolvePromise","code","reason","rejectPromise","consecutiveFailures","totalFailures","_errorFromWSEvent","healthy","online","isWSFailure","window","addEventListener","onlineStatusChanged","removeEventListener","that","connectionOpen","reject","e","JSON","parse","stringify","isConnecting","healthCheckInterval","monitorInterval","_listenForConnectionChanges","_connect","healthCheck","_startMonitor","_startHealthCheck","healthCheckIntervalRef","clearInterval","monitorIntervalRef","_removeConnectionListeners","ws","removeAllListeners","isClosedPromise","close","onclose","_setupConnectionPromise","isoWS","onopen","bind","onerror","onmessage","connectionID","connection_id","interval","_retryInterval","_destroyCurrentWSConnection","open","Math","floor","random","setInterval","client_id","send","JWTUserToken","apiSecret","extraData","jwtOptions","TypeError","payload","opts","algorithm","noTimestamp","jwt","sign","JWTServerToken","server","decodeBase64","String","fromCharCode","L","c","x","l","A","charAt","UserFromToken","token","fragments","split","b64Payload","encodeBase64","btoa","Buffer","from","toString","DevToken","join","CheckSignature","secret","signature","hash","crypto","createHmac","digest","isReadableStream","obj","_read","_readableState","isFunction","prototype","call","Function","StreamChat","secretOrOptions","Boolean","_handleClientEvent","_handleChannelEvent","_callClientListeners","_callChannelListeners","messageEvent","jsonString","wsConnection","cids","lastMessageIDs","values","lastMessageId","queryChannels","$in","limit","recovery","last_message_ids","serverAuth","userToken","browser","node","timeout","nodeOptions","httpAgent","http","Agent","keepAlive","httpsAgent","https","setBaseURL","process","env","STREAM_LOCAL_TEST_RUN","anonymous","wsBaseURL","replace","UUID","uuidv4","connect","_startCleaning","createToken","tokenUserId","_setUser","_setupConnection","_user","apn_config","p12_cert","patch","apnTemplate","apn_template","firebaseTemplate","firebase_template","cleaningIntervalRef","connectionEstablishedCount","_disconnect","disconnect","anon","last_active","guestUser","setUser","access_token","exp","extra","unsubscribe","el","config","params","_logApiRequest","_addClientParams","axios","_logApiResponse","handleResponse","_logApiError","put","FormData","File","fileField","reverse","append","fetch","method","headers","Headers","Authorization","getAuthType","json","err","errorFromResponse","forEach","_updateUserReferences","me","refMap","refs","setIn","connecting","failures","user_details","user_token","server_determines_connection_id","qs","encodeURIComponent","_getToken","authType","_userAgent","recoverState","handleEvent","handshake","filterConditions","sortFields","k","v","field","direction","filter_conditions","updateUsers","channels","channelState","push_provider","channelType","custom","userObject","partialUpdateUsers","userMap","target_user_id","targetID","target_id","target_message_id","commands","clonedMessage","reservedMessageFields","hardDelete","hard","pkg","version","api_key","requestBody","xSignature"],"mappings":"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"}